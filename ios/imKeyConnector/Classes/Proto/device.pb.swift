// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Deviceapi_EmptyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///for app download, update, delete and so on
struct Deviceapi_AppAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seID: String = String()

  var instanceAid: String = String()

  var deviceCert: String = String()

  var sdkVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///for device cert related
struct Deviceapi_DeviceCert {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seID: String = String()

  var sn: String = String()

  var deviceCert: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///auth code related
struct Deviceapi_AuthCode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seID: String = String()

  var authCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_AuthCodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seID: String = String()

  var nextStepkey: String = String()

  var apduList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_AuthCodeServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var returnCode: String {
    get {return _storage._returnCode}
    set {_uniqueStorage()._returnCode = newValue}
  }

  var returnMsg: String {
    get {return _storage._returnMsg}
    set {_uniqueStorage()._returnMsg = newValue}
  }

  var returnData: Deviceapi_AuthCodeResponse {
    get {return _storage._returnData ?? Deviceapi_AuthCodeResponse()}
    set {_uniqueStorage()._returnData = newValue}
  }
  /// Returns true if `returnData` has been explicitly set.
  var hasReturnData: Bool {return _storage._returnData != nil}
  /// Clears the value of `returnData`. Subsequent reads from it will return its default value.
  mutating func clearReturnData() {_uniqueStorage()._returnData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///se related
struct Deviceapi_SeAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seID: String = String()

  var sn: String = String()

  var deviceCert: String = String()

  var sdkVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_SeQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seID: String = String()

  var nextStepkey: String = String()

  var apduList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_SeQueryServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var returnCode: String {
    get {return _storage._returnCode}
    set {_uniqueStorage()._returnCode = newValue}
  }

  var returnMsg: String {
    get {return _storage._returnMsg}
    set {_uniqueStorage()._returnMsg = newValue}
  }

  var returnData: Deviceapi_SeQueryResponse {
    get {return _storage._returnData ?? Deviceapi_SeQueryResponse()}
    set {_uniqueStorage()._returnData = newValue}
  }
  /// Returns true if `returnData` has been explicitly set.
  var hasReturnData: Bool {return _storage._returnData != nil}
  /// Clears the value of `returnData`. Subsequent reads from it will return its default value.
  mutating func clearReturnData() {_uniqueStorage()._returnData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///binding related
struct Deviceapi_BindCheck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var filePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_BindAcquire {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bindCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_BindAcquireResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bindResult: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_BindDisplay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Deviceapi_BindDisplayResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bindDisplayResult: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///name related
struct Deviceapi_DeviceName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bleName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "deviceapi"

extension Deviceapi_EmptyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EmptyResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_EmptyResponse, rhs: Deviceapi_EmptyResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_AppAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se_id"),
    2: .standard(proto: "instance_aid"),
    3: .standard(proto: "device_cert"),
    4: .standard(proto: "sdk_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seID)
      case 2: try decoder.decodeSingularStringField(value: &self.instanceAid)
      case 3: try decoder.decodeSingularStringField(value: &self.deviceCert)
      case 4: try decoder.decodeSingularStringField(value: &self.sdkVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seID.isEmpty {
      try visitor.visitSingularStringField(value: self.seID, fieldNumber: 1)
    }
    if !self.instanceAid.isEmpty {
      try visitor.visitSingularStringField(value: self.instanceAid, fieldNumber: 2)
    }
    if !self.deviceCert.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceCert, fieldNumber: 3)
    }
    if !self.sdkVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.sdkVersion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_AppAction, rhs: Deviceapi_AppAction) -> Bool {
    if lhs.seID != rhs.seID {return false}
    if lhs.instanceAid != rhs.instanceAid {return false}
    if lhs.deviceCert != rhs.deviceCert {return false}
    if lhs.sdkVersion != rhs.sdkVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_DeviceCert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceCert"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se_id"),
    2: .same(proto: "sn"),
    3: .standard(proto: "device_cert"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seID)
      case 2: try decoder.decodeSingularStringField(value: &self.sn)
      case 3: try decoder.decodeSingularStringField(value: &self.deviceCert)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seID.isEmpty {
      try visitor.visitSingularStringField(value: self.seID, fieldNumber: 1)
    }
    if !self.sn.isEmpty {
      try visitor.visitSingularStringField(value: self.sn, fieldNumber: 2)
    }
    if !self.deviceCert.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceCert, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_DeviceCert, rhs: Deviceapi_DeviceCert) -> Bool {
    if lhs.seID != rhs.seID {return false}
    if lhs.sn != rhs.sn {return false}
    if lhs.deviceCert != rhs.deviceCert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_AuthCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthCode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se_id"),
    2: .standard(proto: "auth_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seID)
      case 2: try decoder.decodeSingularStringField(value: &self.authCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seID.isEmpty {
      try visitor.visitSingularStringField(value: self.seID, fieldNumber: 1)
    }
    if !self.authCode.isEmpty {
      try visitor.visitSingularStringField(value: self.authCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_AuthCode, rhs: Deviceapi_AuthCode) -> Bool {
    if lhs.seID != rhs.seID {return false}
    if lhs.authCode != rhs.authCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_AuthCodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthCodeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se_id"),
    2: .standard(proto: "next_stepkey"),
    3: .standard(proto: "apdu_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seID)
      case 2: try decoder.decodeSingularStringField(value: &self.nextStepkey)
      case 3: try decoder.decodeRepeatedStringField(value: &self.apduList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seID.isEmpty {
      try visitor.visitSingularStringField(value: self.seID, fieldNumber: 1)
    }
    if !self.nextStepkey.isEmpty {
      try visitor.visitSingularStringField(value: self.nextStepkey, fieldNumber: 2)
    }
    if !self.apduList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.apduList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_AuthCodeResponse, rhs: Deviceapi_AuthCodeResponse) -> Bool {
    if lhs.seID != rhs.seID {return false}
    if lhs.nextStepkey != rhs.nextStepkey {return false}
    if lhs.apduList != rhs.apduList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_AuthCodeServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthCodeServiceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "return_code"),
    2: .standard(proto: "return_msg"),
    3: .standard(proto: "return_data"),
  ]

  fileprivate class _StorageClass {
    var _returnCode: String = String()
    var _returnMsg: String = String()
    var _returnData: Deviceapi_AuthCodeResponse? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _returnCode = source._returnCode
      _returnMsg = source._returnMsg
      _returnData = source._returnData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._returnCode)
        case 2: try decoder.decodeSingularStringField(value: &_storage._returnMsg)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._returnData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._returnCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._returnCode, fieldNumber: 1)
      }
      if !_storage._returnMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._returnMsg, fieldNumber: 2)
      }
      if let v = _storage._returnData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_AuthCodeServiceResponse, rhs: Deviceapi_AuthCodeServiceResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._returnCode != rhs_storage._returnCode {return false}
        if _storage._returnMsg != rhs_storage._returnMsg {return false}
        if _storage._returnData != rhs_storage._returnData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_SeAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SeAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se_id"),
    2: .same(proto: "sn"),
    3: .standard(proto: "device_cert"),
    4: .standard(proto: "sdk_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seID)
      case 2: try decoder.decodeSingularStringField(value: &self.sn)
      case 3: try decoder.decodeSingularStringField(value: &self.deviceCert)
      case 4: try decoder.decodeSingularStringField(value: &self.sdkVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seID.isEmpty {
      try visitor.visitSingularStringField(value: self.seID, fieldNumber: 1)
    }
    if !self.sn.isEmpty {
      try visitor.visitSingularStringField(value: self.sn, fieldNumber: 2)
    }
    if !self.deviceCert.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceCert, fieldNumber: 3)
    }
    if !self.sdkVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.sdkVersion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_SeAction, rhs: Deviceapi_SeAction) -> Bool {
    if lhs.seID != rhs.seID {return false}
    if lhs.sn != rhs.sn {return false}
    if lhs.deviceCert != rhs.deviceCert {return false}
    if lhs.sdkVersion != rhs.sdkVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_SeQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SeQueryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se_id"),
    2: .standard(proto: "next_stepkey"),
    3: .standard(proto: "apdu_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.seID)
      case 2: try decoder.decodeSingularStringField(value: &self.nextStepkey)
      case 3: try decoder.decodeRepeatedStringField(value: &self.apduList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seID.isEmpty {
      try visitor.visitSingularStringField(value: self.seID, fieldNumber: 1)
    }
    if !self.nextStepkey.isEmpty {
      try visitor.visitSingularStringField(value: self.nextStepkey, fieldNumber: 2)
    }
    if !self.apduList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.apduList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_SeQueryResponse, rhs: Deviceapi_SeQueryResponse) -> Bool {
    if lhs.seID != rhs.seID {return false}
    if lhs.nextStepkey != rhs.nextStepkey {return false}
    if lhs.apduList != rhs.apduList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_SeQueryServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SeQueryServiceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "return_code"),
    2: .standard(proto: "return_msg"),
    3: .standard(proto: "return_data"),
  ]

  fileprivate class _StorageClass {
    var _returnCode: String = String()
    var _returnMsg: String = String()
    var _returnData: Deviceapi_SeQueryResponse? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _returnCode = source._returnCode
      _returnMsg = source._returnMsg
      _returnData = source._returnData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._returnCode)
        case 2: try decoder.decodeSingularStringField(value: &_storage._returnMsg)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._returnData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._returnCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._returnCode, fieldNumber: 1)
      }
      if !_storage._returnMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._returnMsg, fieldNumber: 2)
      }
      if let v = _storage._returnData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_SeQueryServiceResponse, rhs: Deviceapi_SeQueryServiceResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._returnCode != rhs_storage._returnCode {return false}
        if _storage._returnMsg != rhs_storage._returnMsg {return false}
        if _storage._returnData != rhs_storage._returnData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_BindCheck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BindCheck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.filePath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filePath.isEmpty {
      try visitor.visitSingularStringField(value: self.filePath, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_BindCheck, rhs: Deviceapi_BindCheck) -> Bool {
    if lhs.filePath != rhs.filePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_BindAcquire: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BindAcquire"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bind_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.bindCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bindCode.isEmpty {
      try visitor.visitSingularStringField(value: self.bindCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_BindAcquire, rhs: Deviceapi_BindAcquire) -> Bool {
    if lhs.bindCode != rhs.bindCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_BindAcquireResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BindAcquireResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bind_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.bindResult)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bindResult.isEmpty {
      try visitor.visitSingularStringField(value: self.bindResult, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_BindAcquireResponse, rhs: Deviceapi_BindAcquireResponse) -> Bool {
    if lhs.bindResult != rhs.bindResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_BindDisplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BindDisplay"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_BindDisplay, rhs: Deviceapi_BindDisplay) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_BindDisplayResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BindDisplayResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bind_display_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.bindDisplayResult)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bindDisplayResult.isEmpty {
      try visitor.visitSingularStringField(value: self.bindDisplayResult, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_BindDisplayResponse, rhs: Deviceapi_BindDisplayResponse) -> Bool {
    if lhs.bindDisplayResult != rhs.bindDisplayResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Deviceapi_DeviceName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceName"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ble_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.bleName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bleName.isEmpty {
      try visitor.visitSingularStringField(value: self.bleName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Deviceapi_DeviceName, rhs: Deviceapi_DeviceName) -> Bool {
    if lhs.bleName != rhs.bleName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
