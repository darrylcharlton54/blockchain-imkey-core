// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: btc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Btcapi_Utxo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var txHash: String = String()

  public var vout: Int32 = 0

  public var amount: Int64 = 0

  public var address: String = String()

  public var scriptPubKey: String = String()

  public var derivedPath: String = String()

  public var sequence: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Btcapi_BtcTxInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var to: String = String()

  public var amount: Int64 = 0

  public var unspents: [Btcapi_Utxo] = []

  public var fee: Int64 = 0

  public var changeAddressIndex: UInt32 = 0

  public var changeAddress: String = String()

  public var network: String = String()

  public var segWit: String = String()

  public var payment: String = String()

  public var toDis: String = String()

  public var from: String = String()

  public var feeDis: String = String()

  public var extraData: Data = SwiftProtobuf.Internal.emptyData

  public var pathPrefix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Btcapi_BtcTxOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var signature: String = String()

  public var txHash: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "btcapi"

extension Btcapi_Utxo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Utxo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txHash"),
    2: .same(proto: "vout"),
    3: .same(proto: "amount"),
    4: .same(proto: "address"),
    5: .same(proto: "scriptPubKey"),
    6: .same(proto: "derivedPath"),
    7: .same(proto: "sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.txHash)
      case 2: try decoder.decodeSingularInt32Field(value: &self.vout)
      case 3: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 4: try decoder.decodeSingularStringField(value: &self.address)
      case 5: try decoder.decodeSingularStringField(value: &self.scriptPubKey)
      case 6: try decoder.decodeSingularStringField(value: &self.derivedPath)
      case 7: try decoder.decodeSingularInt64Field(value: &self.sequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 1)
    }
    if self.vout != 0 {
      try visitor.visitSingularInt32Field(value: self.vout, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if !self.scriptPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.scriptPubKey, fieldNumber: 5)
    }
    if !self.derivedPath.isEmpty {
      try visitor.visitSingularStringField(value: self.derivedPath, fieldNumber: 6)
    }
    if self.sequence != 0 {
      try visitor.visitSingularInt64Field(value: self.sequence, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Btcapi_Utxo, rhs: Btcapi_Utxo) -> Bool {
    if lhs.txHash != rhs.txHash {return false}
    if lhs.vout != rhs.vout {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.address != rhs.address {return false}
    if lhs.scriptPubKey != rhs.scriptPubKey {return false}
    if lhs.derivedPath != rhs.derivedPath {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Btcapi_BtcTxInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BtcTxInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "amount"),
    3: .same(proto: "unspents"),
    4: .same(proto: "fee"),
    5: .same(proto: "changeAddressIndex"),
    6: .same(proto: "changeAddress"),
    7: .same(proto: "network"),
    8: .same(proto: "segWit"),
    9: .same(proto: "payment"),
    10: .standard(proto: "to_dis"),
    11: .same(proto: "from"),
    12: .standard(proto: "fee_dis"),
    13: .standard(proto: "extra_data"),
    14: .standard(proto: "path_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.to)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.unspents)
      case 4: try decoder.decodeSingularInt64Field(value: &self.fee)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.changeAddressIndex)
      case 6: try decoder.decodeSingularStringField(value: &self.changeAddress)
      case 7: try decoder.decodeSingularStringField(value: &self.network)
      case 8: try decoder.decodeSingularStringField(value: &self.segWit)
      case 9: try decoder.decodeSingularStringField(value: &self.payment)
      case 10: try decoder.decodeSingularStringField(value: &self.toDis)
      case 11: try decoder.decodeSingularStringField(value: &self.from)
      case 12: try decoder.decodeSingularStringField(value: &self.feeDis)
      case 13: try decoder.decodeSingularBytesField(value: &self.extraData)
      case 14: try decoder.decodeSingularStringField(value: &self.pathPrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if !self.unspents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unspents, fieldNumber: 3)
    }
    if self.fee != 0 {
      try visitor.visitSingularInt64Field(value: self.fee, fieldNumber: 4)
    }
    if self.changeAddressIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.changeAddressIndex, fieldNumber: 5)
    }
    if !self.changeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.changeAddress, fieldNumber: 6)
    }
    if !self.network.isEmpty {
      try visitor.visitSingularStringField(value: self.network, fieldNumber: 7)
    }
    if !self.segWit.isEmpty {
      try visitor.visitSingularStringField(value: self.segWit, fieldNumber: 8)
    }
    if !self.payment.isEmpty {
      try visitor.visitSingularStringField(value: self.payment, fieldNumber: 9)
    }
    if !self.toDis.isEmpty {
      try visitor.visitSingularStringField(value: self.toDis, fieldNumber: 10)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 11)
    }
    if !self.feeDis.isEmpty {
      try visitor.visitSingularStringField(value: self.feeDis, fieldNumber: 12)
    }
    if !self.extraData.isEmpty {
      try visitor.visitSingularBytesField(value: self.extraData, fieldNumber: 13)
    }
    if !self.pathPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.pathPrefix, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Btcapi_BtcTxInput, rhs: Btcapi_BtcTxInput) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unspents != rhs.unspents {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.changeAddressIndex != rhs.changeAddressIndex {return false}
    if lhs.changeAddress != rhs.changeAddress {return false}
    if lhs.network != rhs.network {return false}
    if lhs.segWit != rhs.segWit {return false}
    if lhs.payment != rhs.payment {return false}
    if lhs.toDis != rhs.toDis {return false}
    if lhs.from != rhs.from {return false}
    if lhs.feeDis != rhs.feeDis {return false}
    if lhs.extraData != rhs.extraData {return false}
    if lhs.pathPrefix != rhs.pathPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Btcapi_BtcTxOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BtcTxOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "txHash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.signature)
      case 2: try decoder.decodeSingularStringField(value: &self.txHash)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 1)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Btcapi_BtcTxOutput, rhs: Btcapi_BtcTxOutput) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
