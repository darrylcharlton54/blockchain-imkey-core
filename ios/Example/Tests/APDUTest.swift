//
//  APDUTest.swift
//  imKeyConnector_Tests
//
//  Created by joe on 11/15/18.
//  Copyright Â© 2018 CocoaPods. All rights reserved.
//

import XCTest
import imKeyConnector
import CoreBitcoin

class APDUTest: XCTestCase {
  func testSelect(){
    let apdu = APDU.select(aid: Applet.btcAID)
    XCTAssertEqual("00A404000F62616F64616F746F6E673031303030", apdu)
  }
  
  func testBTCPrepare(){
    let data = "01000000047a222fb053b6e5339a9b6f9649f88a9481606cf3c64c4557802b3a819ddf3a98000000001976a914a189f2f7836812aa7a0e36e28a20a10e64010bf688acffffffff31b5a9794dcaf82af1738745afe1ecf402ea4a93e71ae75c7d3d8bf7c78aef45010000001976a91415c4698fadd6a54dede98c2fbc62fb21b13b0d7788acffffffffa92c40dfd195a188d87110557fb7f46dbbfb68c4bb8718f33dc31d61927ec614000000001976a91415c4698fadd6a54dede98c2fbc62fb21b13b0d7788acffffffffb99a3e8884b14f330d2a444a4bc2a03af16804fb99b5e37ee892ed5db8b67f11010000001976a91415c4698fadd6a54dede98c2fbc62fb21b13b0d7788acffffffff028017b42c000000001976a91455bdc1b42e3bed851959846ddf600e96125423e088ac0e47f302000000001976a914b501bc45363560f6d7ad066733e4b393a324befb88ac0000000001000000000000000007A9720000"
//    let apdus = APDU.btcPre(data: data)!
//    XCTAssertEqual("804180806F698FADD6A54DEDE98C2FBC62FB21B13B0D7788ACFFFFFFFF028017B42C000000001976A91455BDC1B42E3BED851959846DDF600E96125423E088AC0E47F302000000001976A914B501BC45363560F6D7AD066733E4B393A324BEFB88AC0000000001000000000000000007A972000000", apdus[apdus.count-1])
  }
  
  func testBTCSign(){
    let path = "m/44'/0'/0'/0/22"
    let apdu = APDU.btcSign(index: 0, hashType: 1, path: path)
    XCTAssertEqual("80420001106D2F3434272F30272F30272F302F323200", apdu)
  }
  
  func testBTCSegwitPrepare(){
    let data = "0200000001df368297e7031809cadcec02a7f96cf05bf2e6495a1f39266634f973548d56cd010000001976a914eff7556e9e3ed0ac0ae9648f79aa51cd38f79b8088acffffffff8fcd7000000000000240420f00000000001976a91413a33f6bf97ac355f005a042a9eb5e9fc19930f588acb4f65e000000000017a914be62a91a162a92d03936ae99c0d71a7777b3fbeb870000000001000000000000000002949Bc46f"
    
//    let apdus = APDU.btcSegWitPre(data: data)!
//    XCTAssertEqual("80310080A40200000001DF368297E7031809CADCEC02A7F96CF05BF2E6495A1F39266634F973548D56CD010000001976A914EFF7556E9E3ED0AC0AE9648F79AA51CD38F79B8088ACFFFFFFFF8FCD7000000000000240420F00000000001976A91413A33F6BF97AC355F005A042A9EB5E9FC19930F588ACB4F65E000000000017A914BE62A91A162A92D03936AE99C0D71A7777B3FBEB870000000001000000000000000002949BC46F00", apdus[apdus.count-1])
  }
  
  func testBTCSegwitSign(){
    let path =  "m/49'/1'/0'/1/6"
    let hashAll = 0x01
    let apdu = APDU.btcSegWitSign(index: 0, hashType: UInt8(hashAll), path: path)
    XCTAssertEqual("803200010F6D2F3439272F31272F30272F312F3600",apdu)
  }
  
  func testETHMsgPrepare(){
    let data = "19457468657265756D205369676E6564204D6573736167653A0A313348656C6C6F20696D546F6B656E"
    let apdus = APDU.ethMessagePrepare(data: data)!
    let lastApdu = "805400802919457468657265756D205369676E6564204D6573736167653A0A313348656C6C6F20696D546F6B656E00"
    XCTAssertEqual(lastApdu, apdus[apdus.count-1])
  }
  
  func testETHMsgSign(){
    let path = "m/44'/60'/0'/0/0";
    let apdu = APDU.ethMessageSign(path: path);
    XCTAssertEqual("80550000106D2F3434272F3630272F30272F302F3000", apdu)
  }
  
  func testFtSign(){
    let path = BIP44.btcMainnet + "/"
    let data = "19457468657265756D205369676E6564204D6573736167653A0A313348656C6C6F20696D546F6B656E"
    let apdu = APDU.ftSign(path: path, data: data)
    XCTAssertEqual("80550000106D2F3434272F3630272F30272F302F3000", apdu)
  }
  
  func testEOSPrepare(){
    let data = "0004085c97bd0704786d746f0806786d66726f6d0907322e30303030300a064c584d454f530120b998c88d8478e87e6dee727adecec067a3201da03ec8f8e8861c946559be635505116d2f3434272f313934272f30272f302f30"
    let apdus = APDU.eosPre(data: data)!
    let lastApdu = "806100805A0004085C97BD0704786D746F0806786D66726F6D0907322E30303030300A064C584D454F530120B998C88D8478E87E6DEE727ADECEC067A3201DA03EC8F8E8861C946559BE635505116D2F3434272F313934272F30272F302F3000"
    XCTAssertEqual(lastApdu, apdus[apdus.count-1])
  }
  
  func testEOSSign(){
    let apdu = APDU.eosSign(nonce: 22)
    XCTAssertEqual("8062000002001600", apdu)
  }
  
  func testBTCXPub(){
    let apdu = APDU.btcXpub(path: BIP44.btcMainnet + "/")
    XCTAssertEqual("804300000C6D2F3434272F30272F30272F00", apdu)
  }
  
  func testETHPub(){
    let apdu = APDU.ethXpub(path: BIP44.eth)
    XCTAssertEqual("80530000106D2F3434272F3630272F30272F302F3000", apdu)
  }
  
  func testEOSPub(){
    let apdu = APDU.eosXpub(path: BIP44.EOS_LEDGER)
    XCTAssertEqual("80630000116D2F3434272F313934272F30272F302F3000", apdu)
  }
  
  func testSetBLE(){
    let apdu = APDU.setBLEName(bleName: "oooo")
    XCTAssertEqual("FFDA4654046F6F6F6F00", apdu)
  }
  
  func testIdentyVerify(){
    let hex = "041362055EF404159719808B06A9FB170331CF6AB8B47878E54660D5A417D69AE980AF370AB3CA18968DC6EAF091B64BAA93A847996A642EF553C543480F81C8214CB1B4A480951F5E2FF8C9041DB7A19FB57271D4DD3BABB62F0E8A1EE8CDBF81BCCF6CF175C42F03D58FA8630B8DF5A1"
    let data = ByteUtil.hexString2Uint8Array(data: hex)!
    let apdu = APDU.identyVerify(data: data, bind: true);
    let expectApdu = "8073800071041362055EF404159719808B06A9FB170331CF6AB8B47878E54660D5A417D69AE980AF370AB3CA18968DC6EAF091B64BAA93A847996A642EF553C543480F81C8214CB1B4A480951F5E2FF8C9041DB7A19FB57271D4DD3BABB62F0E8A1EE8CDBF81BCCF6CF175C42F03D58FA8630B8DF5A100"
    XCTAssertEqual(expectApdu, apdu)
  }
  
  func testInt2Bytes(){
    //41 3133
    let int1 = 41
    var int1Bytes = [UInt8](repeating: 0, count: 2)
    int1Bytes[0] = UInt8((int1 & 0xFF00) >> 8)
    int1Bytes[1] = UInt8(int1 & 0x00FF)
    let int1Hex = ByteUtil.uint8Array2HexString(data: int1Bytes)
    XCTAssertEqual(int1Hex, "0029")
  }
  
  func testDecodeRLP(){

  }
  
  func testSignMVC(){
//    let bytes =
//      [248,220,130,1,1,128,248,122,248,120,248,118,128,160,8,114,40,180,136,244,200,189,253,30,145,145,107,221,98,103,15,8,142,
//       13,64,182,120,13,14,109,245,175,212,171,139,37,131,1,3,119,160,1,97,158,26,138,75,21,208,187,249,216,252,33,7,115,33,146,
//       121,3,59,119,31,54,227,216,51,81,75,46,177,200,223,141,204,139,82,183,210,220,200,12,210,228,0,0,0,160,0,0,0,0,0,0,0,0,0,
//       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,116,
//       114,97,110,115,102,101,114,175,238,160,18,244,79,175,235,126,87,43,40,118,209,37,30,156,192,191,255,11,69,191,180,131,250,
//       161,125,71,75,129,72,138,123,175,1,139,65,88,230,148,209,61,84,175,0,0,0,128,128]
    
    let bytes = [248, 220, 130, 1, 1, 128, 248, 122, 248, 120, 248, 118, 128, 160, 8, 114, 40, 180, 136, 244, 200, 189, 253, 30, 145, 145, 107, 221, 98, 103, 15, 8, 142, 13, 64, 182, 120, 13, 14, 109, 245, 175, 212, 171, 139, 37, 131, 1, 3, 119, 160, 36, 204, 240, 200, 183, 48, 142, 155, 139, 234, 223, 248, 242, 124, 123, 144, 91, 182, 171, 138, 16, 221, 162, 170, 240, 207, 81, 55, 24, 17, 178, 158, 141, 204, 139, 82, 183, 210, 220, 200, 12, 210, 228, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 116, 114, 97, 110, 115, 102, 101, 114, 175, 238, 160, 18, 244, 79, 175, 235, 126, 87, 43, 40, 118, 209, 37, 30, 156, 192, 191, 255, 11, 69, 191, 180, 131, 250, 161, 125, 71, 75, 129, 72, 138, 123, 175, 1, 139, 65, 88, 230, 148, 209, 61, 84, 175, 0, 0, 0, 128, 128]
    
//    let data = "8B7308E9B8BEADFF8F27C7B905BB6AB8A10DDA2AAF0CF51371811B29E8DCC8B52B7D2DCC80CD2E4000000A00000000000000000000000000000000000000000000000000000000000000000A00000000000000000000000000000000000000000000000000000000000000000887472616E73666572AFEEA012F44FAFEB7E572B2876D1251E9CC0BFFF0B45BFB483FAA17D474B81488A7BAF018B4158E694D13D54AF0000008080"
//
    var uint8Bytes = [UInt8]()
    
    
    for byte in bytes {
      uint8Bytes.append(UInt8(byte))
    }
    
//    uint8Bytes = ByteUtil.hexString2Uint8Array(data: data)!
    
    let hash = uint8Bytes.sha256().sha256()
    let path = BIP44.btcMainnet + "/"
    let apdu = APDU.mvcSign(path: path, bytes: hash)
    print(apdu)
  }
  
  public func mvcAPDU(bytes:[UInt8])-> String?{
    var apdu = [UInt8]()
    apdu.append(0x80)//CLA
    apdu.append(0x49)//INS
    apdu.append(0x00)//P1
    apdu.append(0x00)//P2
    apdu.append(UInt8(bytes.count))//Lc
    apdu.append(contentsOf: bytes)
    apdu.append(0x00)
    return ByteUtil.uint8Array2HexString(data: apdu)
  }
}
