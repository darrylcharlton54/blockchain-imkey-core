// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eth.proto

#ifndef PROTOBUF_eth_2eproto__INCLUDED
#define PROTOBUF_eth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ethapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_eth_2eproto();
void protobuf_InitDefaults_eth_2eproto();
void protobuf_AssignDesc_eth_2eproto();
void protobuf_ShutdownFile_eth_2eproto();

class EthAddressResponse;
class EthPersonalSignInput;
class EthPersonalSignOutput;
class EthTxInput;
class EthTxOutput;

// ===================================================================

class EthTxInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ethapi.EthTxInput) */ {
 public:
  EthTxInput();
  virtual ~EthTxInput();

  EthTxInput(const EthTxInput& from);

  inline EthTxInput& operator=(const EthTxInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EthTxInput& default_instance();

  static const EthTxInput* internal_default_instance();

  void Swap(EthTxInput* other);

  // implements Message ----------------------------------------------

  inline EthTxInput* New() const { return New(NULL); }

  EthTxInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EthTxInput& from);
  void MergeFrom(const EthTxInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EthTxInput* other);
  void UnsafeMergeFrom(const EthTxInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // optional string gas_price = 2;
  void clear_gas_price();
  static const int kGasPriceFieldNumber = 2;
  const ::std::string& gas_price() const;
  void set_gas_price(const ::std::string& value);
  void set_gas_price(const char* value);
  void set_gas_price(const char* value, size_t size);
  ::std::string* mutable_gas_price();
  ::std::string* release_gas_price();
  void set_allocated_gas_price(::std::string* gas_price);

  // optional string gas_limit = 3;
  void clear_gas_limit();
  static const int kGasLimitFieldNumber = 3;
  const ::std::string& gas_limit() const;
  void set_gas_limit(const ::std::string& value);
  void set_gas_limit(const char* value);
  void set_gas_limit(const char* value, size_t size);
  ::std::string* mutable_gas_limit();
  ::std::string* release_gas_limit();
  void set_allocated_gas_limit(::std::string* gas_limit);

  // optional string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional string value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string chain_id = 7;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 7;
  const ::std::string& chain_id() const;
  void set_chain_id(const ::std::string& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  ::std::string* mutable_chain_id();
  ::std::string* release_chain_id();
  void set_allocated_chain_id(::std::string* chain_id);

  // optional string path = 8;
  void clear_path();
  static const int kPathFieldNumber = 8;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string payment = 9;
  void clear_payment();
  static const int kPaymentFieldNumber = 9;
  const ::std::string& payment() const;
  void set_payment(const ::std::string& value);
  void set_payment(const char* value);
  void set_payment(const char* value, size_t size);
  ::std::string* mutable_payment();
  ::std::string* release_payment();
  void set_allocated_payment(::std::string* payment);

  // optional string receiver = 10;
  void clear_receiver();
  static const int kReceiverFieldNumber = 10;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // optional string sender = 11;
  void clear_sender();
  static const int kSenderFieldNumber = 11;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // optional string fee = 12;
  void clear_fee();
  static const int kFeeFieldNumber = 12;
  const ::std::string& fee() const;
  void set_fee(const ::std::string& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  ::std::string* mutable_fee();
  ::std::string* release_fee();
  void set_allocated_fee(::std::string* fee);

  // @@protoc_insertion_point(class_scope:ethapi.EthTxInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr gas_price_;
  ::google::protobuf::internal::ArenaStringPtr gas_limit_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr chain_id_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr payment_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr fee_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eth_2eproto_impl();
  friend void  protobuf_AddDesc_eth_2eproto_impl();
  friend void protobuf_AssignDesc_eth_2eproto();
  friend void protobuf_ShutdownFile_eth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EthTxInput> EthTxInput_default_instance_;

// -------------------------------------------------------------------

class EthTxOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ethapi.EthTxOutput) */ {
 public:
  EthTxOutput();
  virtual ~EthTxOutput();

  EthTxOutput(const EthTxOutput& from);

  inline EthTxOutput& operator=(const EthTxOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EthTxOutput& default_instance();

  static const EthTxOutput* internal_default_instance();

  void Swap(EthTxOutput* other);

  // implements Message ----------------------------------------------

  inline EthTxOutput* New() const { return New(NULL); }

  EthTxOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EthTxOutput& from);
  void MergeFrom(const EthTxOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EthTxOutput* other);
  void UnsafeMergeFrom(const EthTxOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string txHash = 2;
  void clear_txhash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // @@protoc_insertion_point(class_scope:ethapi.EthTxOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eth_2eproto_impl();
  friend void  protobuf_AddDesc_eth_2eproto_impl();
  friend void protobuf_AssignDesc_eth_2eproto();
  friend void protobuf_ShutdownFile_eth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EthTxOutput> EthTxOutput_default_instance_;

// -------------------------------------------------------------------

class EthAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ethapi.EthAddressResponse) */ {
 public:
  EthAddressResponse();
  virtual ~EthAddressResponse();

  EthAddressResponse(const EthAddressResponse& from);

  inline EthAddressResponse& operator=(const EthAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EthAddressResponse& default_instance();

  static const EthAddressResponse* internal_default_instance();

  void Swap(EthAddressResponse* other);

  // implements Message ----------------------------------------------

  inline EthAddressResponse* New() const { return New(NULL); }

  EthAddressResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EthAddressResponse& from);
  void MergeFrom(const EthAddressResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EthAddressResponse* other);
  void UnsafeMergeFrom(const EthAddressResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:ethapi.EthAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eth_2eproto_impl();
  friend void  protobuf_AddDesc_eth_2eproto_impl();
  friend void protobuf_AssignDesc_eth_2eproto();
  friend void protobuf_ShutdownFile_eth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EthAddressResponse> EthAddressResponse_default_instance_;

// -------------------------------------------------------------------

class EthPersonalSignInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ethapi.EthPersonalSignInput) */ {
 public:
  EthPersonalSignInput();
  virtual ~EthPersonalSignInput();

  EthPersonalSignInput(const EthPersonalSignInput& from);

  inline EthPersonalSignInput& operator=(const EthPersonalSignInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EthPersonalSignInput& default_instance();

  static const EthPersonalSignInput* internal_default_instance();

  void Swap(EthPersonalSignInput* other);

  // implements Message ----------------------------------------------

  inline EthPersonalSignInput* New() const { return New(NULL); }

  EthPersonalSignInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EthPersonalSignInput& from);
  void MergeFrom(const EthPersonalSignInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EthPersonalSignInput* other);
  void UnsafeMergeFrom(const EthPersonalSignInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string sender = 3;
  void clear_sender();
  static const int kSenderFieldNumber = 3;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // @@protoc_insertion_point(class_scope:ethapi.EthPersonalSignInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eth_2eproto_impl();
  friend void  protobuf_AddDesc_eth_2eproto_impl();
  friend void protobuf_AssignDesc_eth_2eproto();
  friend void protobuf_ShutdownFile_eth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EthPersonalSignInput> EthPersonalSignInput_default_instance_;

// -------------------------------------------------------------------

class EthPersonalSignOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ethapi.EthPersonalSignOutput) */ {
 public:
  EthPersonalSignOutput();
  virtual ~EthPersonalSignOutput();

  EthPersonalSignOutput(const EthPersonalSignOutput& from);

  inline EthPersonalSignOutput& operator=(const EthPersonalSignOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EthPersonalSignOutput& default_instance();

  static const EthPersonalSignOutput* internal_default_instance();

  void Swap(EthPersonalSignOutput* other);

  // implements Message ----------------------------------------------

  inline EthPersonalSignOutput* New() const { return New(NULL); }

  EthPersonalSignOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EthPersonalSignOutput& from);
  void MergeFrom(const EthPersonalSignOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EthPersonalSignOutput* other);
  void UnsafeMergeFrom(const EthPersonalSignOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:ethapi.EthPersonalSignOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eth_2eproto_impl();
  friend void  protobuf_AddDesc_eth_2eproto_impl();
  friend void protobuf_AssignDesc_eth_2eproto();
  friend void protobuf_ShutdownFile_eth_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EthPersonalSignOutput> EthPersonalSignOutput_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EthTxInput

// optional string nonce = 1;
inline void EthTxInput::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::nonce() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.nonce)
}
inline void EthTxInput::set_nonce(const char* value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.nonce)
}
inline void EthTxInput::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.nonce)
}
inline ::std::string* EthTxInput::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_nonce() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.nonce)
}

// optional string gas_price = 2;
inline void EthTxInput::clear_gas_price() {
  gas_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::gas_price() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.gas_price)
  return gas_price_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_gas_price(const ::std::string& value) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.gas_price)
}
inline void EthTxInput::set_gas_price(const char* value) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.gas_price)
}
inline void EthTxInput::set_gas_price(const char* value, size_t size) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.gas_price)
}
inline ::std::string* EthTxInput::mutable_gas_price() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.gas_price)
  return gas_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_gas_price() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.gas_price)
  
  return gas_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_gas_price(::std::string* gas_price) {
  if (gas_price != NULL) {
    
  } else {
    
  }
  gas_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas_price);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.gas_price)
}

// optional string gas_limit = 3;
inline void EthTxInput::clear_gas_limit() {
  gas_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::gas_limit() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.gas_limit)
  return gas_limit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_gas_limit(const ::std::string& value) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.gas_limit)
}
inline void EthTxInput::set_gas_limit(const char* value) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.gas_limit)
}
inline void EthTxInput::set_gas_limit(const char* value, size_t size) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.gas_limit)
}
inline ::std::string* EthTxInput::mutable_gas_limit() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.gas_limit)
  return gas_limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_gas_limit() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.gas_limit)
  
  return gas_limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_gas_limit(::std::string* gas_limit) {
  if (gas_limit != NULL) {
    
  } else {
    
  }
  gas_limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas_limit);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.gas_limit)
}

// optional string to = 4;
inline void EthTxInput::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::to() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.to)
}
inline void EthTxInput::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.to)
}
inline void EthTxInput::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.to)
}
inline ::std::string* EthTxInput::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_to() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.to)
}

// optional string value = 5;
inline void EthTxInput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::value() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.value)
}
inline void EthTxInput::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.value)
}
inline void EthTxInput::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.value)
}
inline ::std::string* EthTxInput::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_value() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.value)
}

// optional string data = 6;
inline void EthTxInput::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::data() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.data)
}
inline void EthTxInput::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.data)
}
inline void EthTxInput::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.data)
}
inline ::std::string* EthTxInput::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_data() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.data)
}

// optional string chain_id = 7;
inline void EthTxInput::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::chain_id() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.chain_id)
}
inline void EthTxInput::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.chain_id)
}
inline void EthTxInput::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.chain_id)
}
inline ::std::string* EthTxInput::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.chain_id)
}

// optional string path = 8;
inline void EthTxInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::path() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.path)
}
inline void EthTxInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.path)
}
inline void EthTxInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.path)
}
inline ::std::string* EthTxInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_path() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.path)
}

// optional string payment = 9;
inline void EthTxInput::clear_payment() {
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::payment() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.payment)
  return payment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_payment(const ::std::string& value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.payment)
}
inline void EthTxInput::set_payment(const char* value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.payment)
}
inline void EthTxInput::set_payment(const char* value, size_t size) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.payment)
}
inline ::std::string* EthTxInput::mutable_payment() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.payment)
  return payment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_payment() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.payment)
  
  return payment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_payment(::std::string* payment) {
  if (payment != NULL) {
    
  } else {
    
  }
  payment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.payment)
}

// optional string receiver = 10;
inline void EthTxInput::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::receiver() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.receiver)
  return receiver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.receiver)
}
inline void EthTxInput::set_receiver(const char* value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.receiver)
}
inline void EthTxInput::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.receiver)
}
inline ::std::string* EthTxInput::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_receiver() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.receiver)
}

// optional string sender = 11;
inline void EthTxInput::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::sender() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.sender)
  return sender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.sender)
}
inline void EthTxInput::set_sender(const char* value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.sender)
}
inline void EthTxInput::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.sender)
}
inline ::std::string* EthTxInput::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_sender() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.sender)
}

// optional string fee = 12;
inline void EthTxInput::clear_fee() {
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxInput::fee() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxInput.fee)
  return fee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_fee(const ::std::string& value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxInput.fee)
}
inline void EthTxInput::set_fee(const char* value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxInput.fee)
}
inline void EthTxInput::set_fee(const char* value, size_t size) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxInput.fee)
}
inline ::std::string* EthTxInput::mutable_fee() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxInput.fee)
  return fee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxInput::release_fee() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxInput.fee)
  
  return fee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxInput::set_allocated_fee(::std::string* fee) {
  if (fee != NULL) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxInput.fee)
}

inline const EthTxInput* EthTxInput::internal_default_instance() {
  return &EthTxInput_default_instance_.get();
}
// -------------------------------------------------------------------

// EthTxOutput

// optional string signature = 1;
inline void EthTxOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxOutput::signature() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxOutput.signature)
}
inline void EthTxOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxOutput.signature)
}
inline void EthTxOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxOutput.signature)
}
inline ::std::string* EthTxOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxOutput::release_signature() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxOutput.signature)
}

// optional string txHash = 2;
inline void EthTxOutput::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthTxOutput::txhash() const {
  // @@protoc_insertion_point(field_get:ethapi.EthTxOutput.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxOutput::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthTxOutput.txHash)
}
inline void EthTxOutput::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthTxOutput.txHash)
}
inline void EthTxOutput::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthTxOutput.txHash)
}
inline ::std::string* EthTxOutput::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthTxOutput.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthTxOutput::release_txhash() {
  // @@protoc_insertion_point(field_release:ethapi.EthTxOutput.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthTxOutput::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthTxOutput.txHash)
}

inline const EthTxOutput* EthTxOutput::internal_default_instance() {
  return &EthTxOutput_default_instance_.get();
}
// -------------------------------------------------------------------

// EthAddressResponse

// optional string address = 1;
inline void EthAddressResponse::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthAddressResponse::address() const {
  // @@protoc_insertion_point(field_get:ethapi.EthAddressResponse.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthAddressResponse::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthAddressResponse.address)
}
inline void EthAddressResponse::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthAddressResponse.address)
}
inline void EthAddressResponse::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthAddressResponse.address)
}
inline ::std::string* EthAddressResponse::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthAddressResponse.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthAddressResponse::release_address() {
  // @@protoc_insertion_point(field_release:ethapi.EthAddressResponse.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthAddressResponse::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthAddressResponse.address)
}

inline const EthAddressResponse* EthAddressResponse::internal_default_instance() {
  return &EthAddressResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// EthPersonalSignInput

// optional string path = 1;
inline void EthPersonalSignInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthPersonalSignInput::path() const {
  // @@protoc_insertion_point(field_get:ethapi.EthPersonalSignInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthPersonalSignInput.path)
}
inline void EthPersonalSignInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthPersonalSignInput.path)
}
inline void EthPersonalSignInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthPersonalSignInput.path)
}
inline ::std::string* EthPersonalSignInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthPersonalSignInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthPersonalSignInput::release_path() {
  // @@protoc_insertion_point(field_release:ethapi.EthPersonalSignInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthPersonalSignInput.path)
}

// optional string message = 2;
inline void EthPersonalSignInput::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthPersonalSignInput::message() const {
  // @@protoc_insertion_point(field_get:ethapi.EthPersonalSignInput.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignInput::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthPersonalSignInput.message)
}
inline void EthPersonalSignInput::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthPersonalSignInput.message)
}
inline void EthPersonalSignInput::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthPersonalSignInput.message)
}
inline ::std::string* EthPersonalSignInput::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthPersonalSignInput.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthPersonalSignInput::release_message() {
  // @@protoc_insertion_point(field_release:ethapi.EthPersonalSignInput.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignInput::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthPersonalSignInput.message)
}

// optional string sender = 3;
inline void EthPersonalSignInput::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthPersonalSignInput::sender() const {
  // @@protoc_insertion_point(field_get:ethapi.EthPersonalSignInput.sender)
  return sender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignInput::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthPersonalSignInput.sender)
}
inline void EthPersonalSignInput::set_sender(const char* value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthPersonalSignInput.sender)
}
inline void EthPersonalSignInput::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthPersonalSignInput.sender)
}
inline ::std::string* EthPersonalSignInput::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthPersonalSignInput.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthPersonalSignInput::release_sender() {
  // @@protoc_insertion_point(field_release:ethapi.EthPersonalSignInput.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignInput::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthPersonalSignInput.sender)
}

inline const EthPersonalSignInput* EthPersonalSignInput::internal_default_instance() {
  return &EthPersonalSignInput_default_instance_.get();
}
// -------------------------------------------------------------------

// EthPersonalSignOutput

// optional string signature = 1;
inline void EthPersonalSignOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthPersonalSignOutput::signature() const {
  // @@protoc_insertion_point(field_get:ethapi.EthPersonalSignOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ethapi.EthPersonalSignOutput.signature)
}
inline void EthPersonalSignOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ethapi.EthPersonalSignOutput.signature)
}
inline void EthPersonalSignOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ethapi.EthPersonalSignOutput.signature)
}
inline ::std::string* EthPersonalSignOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:ethapi.EthPersonalSignOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthPersonalSignOutput::release_signature() {
  // @@protoc_insertion_point(field_release:ethapi.EthPersonalSignOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthPersonalSignOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:ethapi.EthPersonalSignOutput.signature)
}

inline const EthPersonalSignOutput* EthPersonalSignOutput::internal_default_instance() {
  return &EthPersonalSignOutput_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ethapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eth_2eproto__INCLUDED
