// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eos.proto

#ifndef PROTOBUF_eos_2eproto__INCLUDED
#define PROTOBUF_eos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace eosapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_eos_2eproto();
void protobuf_InitDefaults_eos_2eproto();
void protobuf_AssignDesc_eos_2eproto();
void protobuf_ShutdownFile_eos_2eproto();

class EosMessageInput;
class EosMessageOutput;
class EosPubkey;
class EosPubkeyResponse;
class EosSignData;
class EosTxInput;
class EosTxOutput;

// ===================================================================

class EosSignData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosSignData) */ {
 public:
  EosSignData();
  virtual ~EosSignData();

  EosSignData(const EosSignData& from);

  inline EosSignData& operator=(const EosSignData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosSignData& default_instance();

  static const EosSignData* internal_default_instance();

  void Swap(EosSignData* other);

  // implements Message ----------------------------------------------

  inline EosSignData* New() const { return New(NULL); }

  EosSignData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosSignData& from);
  void MergeFrom(const EosSignData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosSignData* other);
  void UnsafeMergeFrom(const EosSignData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tx_data = 1;
  void clear_tx_data();
  static const int kTxDataFieldNumber = 1;
  const ::std::string& tx_data() const;
  void set_tx_data(const ::std::string& value);
  void set_tx_data(const char* value);
  void set_tx_data(const char* value, size_t size);
  ::std::string* mutable_tx_data();
  ::std::string* release_tx_data();
  void set_allocated_tx_data(::std::string* tx_data);

  // repeated string pub_keys = 2;
  int pub_keys_size() const;
  void clear_pub_keys();
  static const int kPubKeysFieldNumber = 2;
  const ::std::string& pub_keys(int index) const;
  ::std::string* mutable_pub_keys(int index);
  void set_pub_keys(int index, const ::std::string& value);
  void set_pub_keys(int index, const char* value);
  void set_pub_keys(int index, const char* value, size_t size);
  ::std::string* add_pub_keys();
  void add_pub_keys(const ::std::string& value);
  void add_pub_keys(const char* value);
  void add_pub_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pub_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pub_keys();

  // optional string chain_id = 3;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 3;
  const ::std::string& chain_id() const;
  void set_chain_id(const ::std::string& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  ::std::string* mutable_chain_id();
  ::std::string* release_chain_id();
  void set_allocated_chain_id(::std::string* chain_id);

  // optional string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional string from = 5;
  void clear_from();
  static const int kFromFieldNumber = 5;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string payment = 6;
  void clear_payment();
  static const int kPaymentFieldNumber = 6;
  const ::std::string& payment() const;
  void set_payment(const ::std::string& value);
  void set_payment(const char* value);
  void set_payment(const char* value, size_t size);
  ::std::string* mutable_payment();
  ::std::string* release_payment();
  void set_allocated_payment(::std::string* payment);

  // @@protoc_insertion_point(class_scope:eosapi.EosSignData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pub_keys_;
  ::google::protobuf::internal::ArenaStringPtr tx_data_;
  ::google::protobuf::internal::ArenaStringPtr chain_id_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr payment_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosSignData> EosSignData_default_instance_;

// -------------------------------------------------------------------

class EosTxInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosTxInput) */ {
 public:
  EosTxInput();
  virtual ~EosTxInput();

  EosTxInput(const EosTxInput& from);

  inline EosTxInput& operator=(const EosTxInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosTxInput& default_instance();

  static const EosTxInput* internal_default_instance();

  void Swap(EosTxInput* other);

  // implements Message ----------------------------------------------

  inline EosTxInput* New() const { return New(NULL); }

  EosTxInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosTxInput& from);
  void MergeFrom(const EosTxInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosTxInput* other);
  void UnsafeMergeFrom(const EosTxInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // repeated .eosapi.EosSignData sign_datas = 2;
  int sign_datas_size() const;
  void clear_sign_datas();
  static const int kSignDatasFieldNumber = 2;
  const ::eosapi::EosSignData& sign_datas(int index) const;
  ::eosapi::EosSignData* mutable_sign_datas(int index);
  ::eosapi::EosSignData* add_sign_datas();
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
      mutable_sign_datas();
  const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
      sign_datas() const;

  // @@protoc_insertion_point(class_scope:eosapi.EosTxInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData > sign_datas_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosTxInput> EosTxInput_default_instance_;

// -------------------------------------------------------------------

class EosTxOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosTxOutput) */ {
 public:
  EosTxOutput();
  virtual ~EosTxOutput();

  EosTxOutput(const EosTxOutput& from);

  inline EosTxOutput& operator=(const EosTxOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosTxOutput& default_instance();

  static const EosTxOutput* internal_default_instance();

  void Swap(EosTxOutput* other);

  // implements Message ----------------------------------------------

  inline EosTxOutput* New() const { return New(NULL); }

  EosTxOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosTxOutput& from);
  void MergeFrom(const EosTxOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosTxOutput* other);
  void UnsafeMergeFrom(const EosTxOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // repeated string signs = 2;
  int signs_size() const;
  void clear_signs();
  static const int kSignsFieldNumber = 2;
  const ::std::string& signs(int index) const;
  ::std::string* mutable_signs(int index);
  void set_signs(int index, const ::std::string& value);
  void set_signs(int index, const char* value);
  void set_signs(int index, const char* value, size_t size);
  ::std::string* add_signs();
  void add_signs(const ::std::string& value);
  void add_signs(const char* value);
  void add_signs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& signs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_signs();

  // @@protoc_insertion_point(class_scope:eosapi.EosTxOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> signs_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosTxOutput> EosTxOutput_default_instance_;

// -------------------------------------------------------------------

class EosPubkey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosPubkey) */ {
 public:
  EosPubkey();
  virtual ~EosPubkey();

  EosPubkey(const EosPubkey& from);

  inline EosPubkey& operator=(const EosPubkey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosPubkey& default_instance();

  static const EosPubkey* internal_default_instance();

  void Swap(EosPubkey* other);

  // implements Message ----------------------------------------------

  inline EosPubkey* New() const { return New(NULL); }

  EosPubkey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosPubkey& from);
  void MergeFrom(const EosPubkey& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosPubkey* other);
  void UnsafeMergeFrom(const EosPubkey& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:eosapi.EosPubkey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosPubkey> EosPubkey_default_instance_;

// -------------------------------------------------------------------

class EosPubkeyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosPubkeyResponse) */ {
 public:
  EosPubkeyResponse();
  virtual ~EosPubkeyResponse();

  EosPubkeyResponse(const EosPubkeyResponse& from);

  inline EosPubkeyResponse& operator=(const EosPubkeyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosPubkeyResponse& default_instance();

  static const EosPubkeyResponse* internal_default_instance();

  void Swap(EosPubkeyResponse* other);

  // implements Message ----------------------------------------------

  inline EosPubkeyResponse* New() const { return New(NULL); }

  EosPubkeyResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosPubkeyResponse& from);
  void MergeFrom(const EosPubkeyResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosPubkeyResponse* other);
  void UnsafeMergeFrom(const EosPubkeyResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pubkey = 1;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // @@protoc_insertion_point(class_scope:eosapi.EosPubkeyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosPubkeyResponse> EosPubkeyResponse_default_instance_;

// -------------------------------------------------------------------

class EosMessageInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosMessageInput) */ {
 public:
  EosMessageInput();
  virtual ~EosMessageInput();

  EosMessageInput(const EosMessageInput& from);

  inline EosMessageInput& operator=(const EosMessageInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosMessageInput& default_instance();

  static const EosMessageInput* internal_default_instance();

  void Swap(EosMessageInput* other);

  // implements Message ----------------------------------------------

  inline EosMessageInput* New() const { return New(NULL); }

  EosMessageInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosMessageInput& from);
  void MergeFrom(const EosMessageInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosMessageInput* other);
  void UnsafeMergeFrom(const EosMessageInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bool is_hex = 3;
  void clear_is_hex();
  static const int kIsHexFieldNumber = 3;
  bool is_hex() const;
  void set_is_hex(bool value);

  // optional string pubkey = 4;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 4;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // @@protoc_insertion_point(class_scope:eosapi.EosMessageInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  bool is_hex_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosMessageInput> EosMessageInput_default_instance_;

// -------------------------------------------------------------------

class EosMessageOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eosapi.EosMessageOutput) */ {
 public:
  EosMessageOutput();
  virtual ~EosMessageOutput();

  EosMessageOutput(const EosMessageOutput& from);

  inline EosMessageOutput& operator=(const EosMessageOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EosMessageOutput& default_instance();

  static const EosMessageOutput* internal_default_instance();

  void Swap(EosMessageOutput* other);

  // implements Message ----------------------------------------------

  inline EosMessageOutput* New() const { return New(NULL); }

  EosMessageOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EosMessageOutput& from);
  void MergeFrom(const EosMessageOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EosMessageOutput* other);
  void UnsafeMergeFrom(const EosMessageOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:eosapi.EosMessageOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_eos_2eproto_impl();
  friend void  protobuf_AddDesc_eos_2eproto_impl();
  friend void protobuf_AssignDesc_eos_2eproto();
  friend void protobuf_ShutdownFile_eos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EosMessageOutput> EosMessageOutput_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EosSignData

// optional string tx_data = 1;
inline void EosSignData::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::tx_data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.tx_data)
}
inline void EosSignData::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.tx_data)
}
inline void EosSignData::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.tx_data)
}
inline ::std::string* EosSignData::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_tx_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.tx_data)
}

// repeated string pub_keys = 2;
inline int EosSignData::pub_keys_size() const {
  return pub_keys_.size();
}
inline void EosSignData::clear_pub_keys() {
  pub_keys_.Clear();
}
inline const ::std::string& EosSignData::pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.pub_keys)
  return pub_keys_.Get(index);
}
inline ::std::string* EosSignData::mutable_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Mutable(index);
}
inline void EosSignData::set_pub_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.pub_keys)
  pub_keys_.Mutable(index)->assign(value);
}
inline void EosSignData::set_pub_keys(int index, const char* value) {
  pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.pub_keys)
}
inline void EosSignData::set_pub_keys(int index, const char* value, size_t size) {
  pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.pub_keys)
}
inline ::std::string* EosSignData::add_pub_keys() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Add();
}
inline void EosSignData::add_pub_keys(const ::std::string& value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignData.pub_keys)
}
inline void EosSignData::add_pub_keys(const char* value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignData.pub_keys)
}
inline void EosSignData::add_pub_keys(const char* value, size_t size) {
  pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignData.pub_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignData::pub_keys() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignData.pub_keys)
  return pub_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignData::mutable_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignData.pub_keys)
  return &pub_keys_;
}

// optional string chain_id = 3;
inline void EosSignData::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::chain_id() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.chain_id)
}
inline void EosSignData::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.chain_id)
}
inline void EosSignData::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.chain_id)
}
inline ::std::string* EosSignData::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_chain_id() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.chain_id)
}

// optional string to = 4;
inline void EosSignData::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::to() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.to)
}
inline void EosSignData::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.to)
}
inline void EosSignData::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.to)
}
inline ::std::string* EosSignData::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_to() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.to)
}

// optional string from = 5;
inline void EosSignData::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::from() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.from)
}
inline void EosSignData::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.from)
}
inline void EosSignData::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.from)
}
inline ::std::string* EosSignData::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_from() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.from)
}

// optional string payment = 6;
inline void EosSignData::clear_payment() {
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosSignData::payment() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.payment)
  return payment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_payment(const ::std::string& value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.payment)
}
inline void EosSignData::set_payment(const char* value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.payment)
}
inline void EosSignData::set_payment(const char* value, size_t size) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.payment)
}
inline ::std::string* EosSignData::mutable_payment() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.payment)
  return payment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosSignData::release_payment() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.payment)
  
  return payment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosSignData::set_allocated_payment(::std::string* payment) {
  if (payment != NULL) {
    
  } else {
    
  }
  payment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.payment)
}

inline const EosSignData* EosSignData::internal_default_instance() {
  return &EosSignData_default_instance_.get();
}
// -------------------------------------------------------------------

// EosTxInput

// optional string path = 1;
inline void EosTxInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosTxInput::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosTxInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosTxInput.path)
}
inline void EosTxInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxInput.path)
}
inline void EosTxInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxInput.path)
}
inline ::std::string* EosTxInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosTxInput::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosTxInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosTxInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosTxInput.path)
}

// repeated .eosapi.EosSignData sign_datas = 2;
inline int EosTxInput::sign_datas_size() const {
  return sign_datas_.size();
}
inline void EosTxInput::clear_sign_datas() {
  sign_datas_.Clear();
}
inline const ::eosapi::EosSignData& EosTxInput::sign_datas(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxInput.sign_datas)
  return sign_datas_.Get(index);
}
inline ::eosapi::EosSignData* EosTxInput::mutable_sign_datas(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxInput.sign_datas)
  return sign_datas_.Mutable(index);
}
inline ::eosapi::EosSignData* EosTxInput::add_sign_datas() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxInput.sign_datas)
  return sign_datas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
EosTxInput::mutable_sign_datas() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxInput.sign_datas)
  return &sign_datas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
EosTxInput::sign_datas() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxInput.sign_datas)
  return sign_datas_;
}

inline const EosTxInput* EosTxInput::internal_default_instance() {
  return &EosTxInput_default_instance_.get();
}
// -------------------------------------------------------------------

// EosTxOutput

// optional string hash = 1;
inline void EosTxOutput::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosTxOutput::hash() const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxOutput.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosTxOutput::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosTxOutput.hash)
}
inline void EosTxOutput::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxOutput.hash)
}
inline void EosTxOutput::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxOutput.hash)
}
inline ::std::string* EosTxOutput::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxOutput.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosTxOutput::release_hash() {
  // @@protoc_insertion_point(field_release:eosapi.EosTxOutput.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosTxOutput::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosTxOutput.hash)
}

// repeated string signs = 2;
inline int EosTxOutput::signs_size() const {
  return signs_.size();
}
inline void EosTxOutput::clear_signs() {
  signs_.Clear();
}
inline const ::std::string& EosTxOutput::signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxOutput.signs)
  return signs_.Get(index);
}
inline ::std::string* EosTxOutput::mutable_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxOutput.signs)
  return signs_.Mutable(index);
}
inline void EosTxOutput::set_signs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosTxOutput.signs)
  signs_.Mutable(index)->assign(value);
}
inline void EosTxOutput::set_signs(int index, const char* value) {
  signs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxOutput.signs)
}
inline void EosTxOutput::set_signs(int index, const char* value, size_t size) {
  signs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxOutput.signs)
}
inline ::std::string* EosTxOutput::add_signs() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosTxOutput.signs)
  return signs_.Add();
}
inline void EosTxOutput::add_signs(const ::std::string& value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosTxOutput.signs)
}
inline void EosTxOutput::add_signs(const char* value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosTxOutput.signs)
}
inline void EosTxOutput::add_signs(const char* value, size_t size) {
  signs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosTxOutput.signs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosTxOutput::signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxOutput.signs)
  return signs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EosTxOutput::mutable_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxOutput.signs)
  return &signs_;
}

inline const EosTxOutput* EosTxOutput::internal_default_instance() {
  return &EosTxOutput_default_instance_.get();
}
// -------------------------------------------------------------------

// EosPubkey

// optional string path = 1;
inline void EosPubkey::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosPubkey::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkey.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkey::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkey.path)
}
inline void EosPubkey::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkey.path)
}
inline void EosPubkey::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkey.path)
}
inline ::std::string* EosPubkey::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkey.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosPubkey::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkey.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkey::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkey.path)
}

inline const EosPubkey* EosPubkey::internal_default_instance() {
  return &EosPubkey_default_instance_.get();
}
// -------------------------------------------------------------------

// EosPubkeyResponse

// optional string pubkey = 1;
inline void EosPubkeyResponse::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosPubkeyResponse::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkeyResponse.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkeyResponse::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkeyResponse.pubkey)
}
inline void EosPubkeyResponse::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkeyResponse.pubkey)
}
inline void EosPubkeyResponse::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkeyResponse.pubkey)
}
inline ::std::string* EosPubkeyResponse::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkeyResponse.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosPubkeyResponse::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkeyResponse.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosPubkeyResponse::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkeyResponse.pubkey)
}

inline const EosPubkeyResponse* EosPubkeyResponse::internal_default_instance() {
  return &EosPubkeyResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// EosMessageInput

// optional string path = 1;
inline void EosMessageInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageInput::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.path)
}
inline void EosMessageInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.path)
}
inline void EosMessageInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.path)
}
inline ::std::string* EosMessageInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageInput::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.path)
}

// optional string data = 2;
inline void EosMessageInput::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageInput::data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.data)
}
inline void EosMessageInput::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.data)
}
inline void EosMessageInput::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.data)
}
inline ::std::string* EosMessageInput::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageInput::release_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.data)
}

// optional bool is_hex = 3;
inline void EosMessageInput::clear_is_hex() {
  is_hex_ = false;
}
inline bool EosMessageInput::is_hex() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.is_hex)
  return is_hex_;
}
inline void EosMessageInput::set_is_hex(bool value) {
  
  is_hex_ = value;
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.is_hex)
}

// optional string pubkey = 4;
inline void EosMessageInput::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageInput::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.pubkey)
}
inline void EosMessageInput::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.pubkey)
}
inline void EosMessageInput::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.pubkey)
}
inline ::std::string* EosMessageInput::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageInput::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageInput::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.pubkey)
}

inline const EosMessageInput* EosMessageInput::internal_default_instance() {
  return &EosMessageInput_default_instance_.get();
}
// -------------------------------------------------------------------

// EosMessageOutput

// optional string signature = 1;
inline void EosMessageOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EosMessageOutput::signature() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageOutput.signature)
}
inline void EosMessageOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageOutput.signature)
}
inline void EosMessageOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageOutput.signature)
}
inline ::std::string* EosMessageOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EosMessageOutput::release_signature() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EosMessageOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageOutput.signature)
}

inline const EosMessageOutput* EosMessageOutput::internal_default_instance() {
  return &EosMessageOutput_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eosapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eos_2eproto__INCLUDED
