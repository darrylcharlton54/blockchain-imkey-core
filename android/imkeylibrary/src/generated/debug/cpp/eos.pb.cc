// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eosapi {

namespace {

const ::google::protobuf::Descriptor* EosSignData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosSignData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosTxInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosTxInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosTxOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosTxOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosPubkey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosPubkey_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosPubkeyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosPubkeyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosMessageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosMessageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EosMessageOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EosMessageOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_eos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_eos_2eproto() {
  protobuf_AddDesc_eos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "eos.proto");
  GOOGLE_CHECK(file != NULL);
  EosSignData_descriptor_ = file->message_type(0);
  static const int EosSignData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, tx_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, pub_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, payment_),
  };
  EosSignData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosSignData_descriptor_,
      EosSignData::internal_default_instance(),
      EosSignData_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosSignData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosSignData, _internal_metadata_));
  EosTxInput_descriptor_ = file->message_type(1);
  static const int EosTxInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxInput, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxInput, sign_datas_),
  };
  EosTxInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosTxInput_descriptor_,
      EosTxInput::internal_default_instance(),
      EosTxInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosTxInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxInput, _internal_metadata_));
  EosTxOutput_descriptor_ = file->message_type(2);
  static const int EosTxOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxOutput, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxOutput, signs_),
  };
  EosTxOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosTxOutput_descriptor_,
      EosTxOutput::internal_default_instance(),
      EosTxOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosTxOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosTxOutput, _internal_metadata_));
  EosPubkey_descriptor_ = file->message_type(3);
  static const int EosPubkey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkey, path_),
  };
  EosPubkey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosPubkey_descriptor_,
      EosPubkey::internal_default_instance(),
      EosPubkey_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosPubkey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkey, _internal_metadata_));
  EosPubkeyResponse_descriptor_ = file->message_type(4);
  static const int EosPubkeyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkeyResponse, pubkey_),
  };
  EosPubkeyResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosPubkeyResponse_descriptor_,
      EosPubkeyResponse::internal_default_instance(),
      EosPubkeyResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosPubkeyResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosPubkeyResponse, _internal_metadata_));
  EosMessageInput_descriptor_ = file->message_type(5);
  static const int EosMessageInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageInput, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageInput, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageInput, is_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageInput, pubkey_),
  };
  EosMessageInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosMessageInput_descriptor_,
      EosMessageInput::internal_default_instance(),
      EosMessageInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosMessageInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageInput, _internal_metadata_));
  EosMessageOutput_descriptor_ = file->message_type(6);
  static const int EosMessageOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageOutput, signature_),
  };
  EosMessageOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EosMessageOutput_descriptor_,
      EosMessageOutput::internal_default_instance(),
      EosMessageOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(EosMessageOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EosMessageOutput, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_eos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosSignData_descriptor_, EosSignData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosTxInput_descriptor_, EosTxInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosTxOutput_descriptor_, EosTxOutput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosPubkey_descriptor_, EosPubkey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosPubkeyResponse_descriptor_, EosPubkeyResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosMessageInput_descriptor_, EosMessageInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EosMessageOutput_descriptor_, EosMessageOutput::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_eos_2eproto() {
  EosSignData_default_instance_.Shutdown();
  delete EosSignData_reflection_;
  EosTxInput_default_instance_.Shutdown();
  delete EosTxInput_reflection_;
  EosTxOutput_default_instance_.Shutdown();
  delete EosTxOutput_reflection_;
  EosPubkey_default_instance_.Shutdown();
  delete EosPubkey_reflection_;
  EosPubkeyResponse_default_instance_.Shutdown();
  delete EosPubkeyResponse_reflection_;
  EosMessageInput_default_instance_.Shutdown();
  delete EosMessageInput_reflection_;
  EosMessageOutput_default_instance_.Shutdown();
  delete EosMessageOutput_reflection_;
}

void protobuf_InitDefaults_eos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  EosSignData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosTxInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosTxOutput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosPubkey_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosPubkeyResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosMessageInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EosMessageOutput_default_instance_.DefaultConstruct();
  EosSignData_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosTxInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosTxOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosPubkey_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosPubkeyResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosMessageInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  EosMessageOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_eos_2eproto_once_);
void protobuf_InitDefaults_eos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_eos_2eproto_once_,
                 &protobuf_InitDefaults_eos_2eproto_impl);
}
void protobuf_AddDesc_eos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_eos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\teos.proto\022\006eosapi\"m\n\013EosSignData\022\017\n\007tx"
    "_data\030\001 \001(\t\022\020\n\010pub_keys\030\002 \003(\t\022\020\n\010chain_i"
    "d\030\003 \001(\t\022\n\n\002to\030\004 \001(\t\022\014\n\004from\030\005 \001(\t\022\017\n\007pay"
    "ment\030\006 \001(\t\"C\n\nEosTxInput\022\014\n\004path\030\001 \001(\t\022\'"
    "\n\nsign_datas\030\002 \003(\0132\023.eosapi.EosSignData\""
    "*\n\013EosTxOutput\022\014\n\004hash\030\001 \001(\t\022\r\n\005signs\030\002 "
    "\003(\t\"\031\n\tEosPubkey\022\014\n\004path\030\001 \001(\t\"#\n\021EosPub"
    "keyResponse\022\016\n\006pubkey\030\001 \001(\t\"M\n\017EosMessag"
    "eInput\022\014\n\004path\030\001 \001(\t\022\014\n\004data\030\002 \001(\t\022\016\n\006is"
    "_hex\030\003 \001(\010\022\016\n\006pubkey\030\004 \001(\t\"%\n\020EosMessage"
    "Output\022\021\n\tsignature\030\001 \001(\tb\006proto3", 433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eos.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_eos_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_eos_2eproto_once_);
void protobuf_AddDesc_eos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_eos_2eproto_once_,
                 &protobuf_AddDesc_eos_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_eos_2eproto {
  StaticDescriptorInitializer_eos_2eproto() {
    protobuf_AddDesc_eos_2eproto();
  }
} static_descriptor_initializer_eos_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosSignData::kTxDataFieldNumber;
const int EosSignData::kPubKeysFieldNumber;
const int EosSignData::kChainIdFieldNumber;
const int EosSignData::kToFieldNumber;
const int EosSignData::kFromFieldNumber;
const int EosSignData::kPaymentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosSignData::EosSignData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosSignData)
}

void EosSignData::InitAsDefaultInstance() {
}

EosSignData::EosSignData(const EosSignData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosSignData)
}

void EosSignData::SharedCtor() {
  tx_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosSignData::~EosSignData() {
  // @@protoc_insertion_point(destructor:eosapi.EosSignData)
  SharedDtor();
}

void EosSignData::SharedDtor() {
  tx_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosSignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosSignData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosSignData_descriptor_;
}

const EosSignData& EosSignData::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosSignData> EosSignData_default_instance_;

EosSignData* EosSignData::New(::google::protobuf::Arena* arena) const {
  EosSignData* n = new EosSignData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosSignData::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosSignData)
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_keys_.Clear();
}

bool EosSignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosSignData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tx_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_data().data(), this->tx_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.tx_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pub_keys;
        break;
      }

      // repeated string pub_keys = 2;
      case 2: {
        if (tag == 18) {
         parse_pub_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pub_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pub_keys(this->pub_keys_size() - 1).data(),
            this->pub_keys(this->pub_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.pub_keys"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pub_keys;
        if (input->ExpectTag(26)) goto parse_chain_id;
        break;
      }

      // optional string chain_id = 3;
      case 3: {
        if (tag == 26) {
         parse_chain_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), this->chain_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.chain_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }

      // optional string to = 4;
      case 4: {
        if (tag == 34) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from;
        break;
      }

      // optional string from = 5;
      case 5: {
        if (tag == 42) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_payment;
        break;
      }

      // optional string payment = 6;
      case 6: {
        if (tag == 50) {
         parse_payment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payment().data(), this->payment().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosSignData.payment"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosSignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosSignData)
  return false;
#undef DO_
}

void EosSignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosSignData)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.tx_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tx_data(), output);
  }

  // repeated string pub_keys = 2;
  for (int i = 0; i < this->pub_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_keys(i).data(), this->pub_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.pub_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pub_keys(i), output);
  }

  // optional string chain_id = 3;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chain_id(), output);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to(), output);
  }

  // optional string from = 5;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from(), output);
  }

  // optional string payment = 6;
  if (this->payment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment().data(), this->payment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.payment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payment(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosSignData)
}

::google::protobuf::uint8* EosSignData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosSignData)
  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_data().data(), this->tx_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.tx_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tx_data(), target);
  }

  // repeated string pub_keys = 2;
  for (int i = 0; i < this->pub_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_keys(i).data(), this->pub_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.pub_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->pub_keys(i), target);
  }

  // optional string chain_id = 3;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chain_id(), target);
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }

  // optional string from = 5;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from(), target);
  }

  // optional string payment = 6;
  if (this->payment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment().data(), this->payment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosSignData.payment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->payment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosSignData)
  return target;
}

size_t EosSignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosSignData)
  size_t total_size = 0;

  // optional string tx_data = 1;
  if (this->tx_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_data());
  }

  // optional string chain_id = 3;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // optional string to = 4;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional string from = 5;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // optional string payment = 6;
  if (this->payment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payment());
  }

  // repeated string pub_keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pub_keys_size());
  for (int i = 0; i < this->pub_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pub_keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosSignData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosSignData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosSignData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosSignData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosSignData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosSignData)
    UnsafeMergeFrom(*source);
  }
}

void EosSignData::MergeFrom(const EosSignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosSignData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosSignData::UnsafeMergeFrom(const EosSignData& from) {
  GOOGLE_DCHECK(&from != this);
  pub_keys_.UnsafeMergeFrom(from.pub_keys_);
  if (from.tx_data().size() > 0) {

    tx_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_data_);
  }
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.payment().size() > 0) {

    payment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payment_);
  }
}

void EosSignData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosSignData::CopyFrom(const EosSignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosSignData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosSignData::IsInitialized() const {

  return true;
}

void EosSignData::Swap(EosSignData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosSignData::InternalSwap(EosSignData* other) {
  tx_data_.Swap(&other->tx_data_);
  pub_keys_.UnsafeArenaSwap(&other->pub_keys_);
  chain_id_.Swap(&other->chain_id_);
  to_.Swap(&other->to_);
  from_.Swap(&other->from_);
  payment_.Swap(&other->payment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosSignData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosSignData_descriptor_;
  metadata.reflection = EosSignData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosSignData

// optional string tx_data = 1;
void EosSignData::clear_tx_data() {
  tx_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::tx_data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.tx_data)
  return tx_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_tx_data(const ::std::string& value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.tx_data)
}
void EosSignData::set_tx_data(const char* value) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.tx_data)
}
void EosSignData::set_tx_data(const char* value, size_t size) {
  
  tx_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.tx_data)
}
::std::string* EosSignData::mutable_tx_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.tx_data)
  return tx_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_tx_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.tx_data)
  
  return tx_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_tx_data(::std::string* tx_data) {
  if (tx_data != NULL) {
    
  } else {
    
  }
  tx_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.tx_data)
}

// repeated string pub_keys = 2;
int EosSignData::pub_keys_size() const {
  return pub_keys_.size();
}
void EosSignData::clear_pub_keys() {
  pub_keys_.Clear();
}
const ::std::string& EosSignData::pub_keys(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.pub_keys)
  return pub_keys_.Get(index);
}
::std::string* EosSignData::mutable_pub_keys(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Mutable(index);
}
void EosSignData::set_pub_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.pub_keys)
  pub_keys_.Mutable(index)->assign(value);
}
void EosSignData::set_pub_keys(int index, const char* value) {
  pub_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.pub_keys)
}
void EosSignData::set_pub_keys(int index, const char* value, size_t size) {
  pub_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.pub_keys)
}
::std::string* EosSignData::add_pub_keys() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosSignData.pub_keys)
  return pub_keys_.Add();
}
void EosSignData::add_pub_keys(const ::std::string& value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosSignData.pub_keys)
}
void EosSignData::add_pub_keys(const char* value) {
  pub_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosSignData.pub_keys)
}
void EosSignData::add_pub_keys(const char* value, size_t size) {
  pub_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosSignData.pub_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosSignData::pub_keys() const {
  // @@protoc_insertion_point(field_list:eosapi.EosSignData.pub_keys)
  return pub_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EosSignData::mutable_pub_keys() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosSignData.pub_keys)
  return &pub_keys_;
}

// optional string chain_id = 3;
void EosSignData::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::chain_id() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.chain_id)
}
void EosSignData::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.chain_id)
}
void EosSignData::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.chain_id)
}
::std::string* EosSignData::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_chain_id() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.chain_id)
}

// optional string to = 4;
void EosSignData::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::to() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.to)
}
void EosSignData::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.to)
}
void EosSignData::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.to)
}
::std::string* EosSignData::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_to() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.to)
}

// optional string from = 5;
void EosSignData::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::from() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.from)
}
void EosSignData::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.from)
}
void EosSignData::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.from)
}
::std::string* EosSignData::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_from() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.from)
}

// optional string payment = 6;
void EosSignData::clear_payment() {
  payment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosSignData::payment() const {
  // @@protoc_insertion_point(field_get:eosapi.EosSignData.payment)
  return payment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_payment(const ::std::string& value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosSignData.payment)
}
void EosSignData::set_payment(const char* value) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosSignData.payment)
}
void EosSignData::set_payment(const char* value, size_t size) {
  
  payment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosSignData.payment)
}
::std::string* EosSignData::mutable_payment() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosSignData.payment)
  return payment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosSignData::release_payment() {
  // @@protoc_insertion_point(field_release:eosapi.EosSignData.payment)
  
  return payment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosSignData::set_allocated_payment(::std::string* payment) {
  if (payment != NULL) {
    
  } else {
    
  }
  payment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosSignData.payment)
}

inline const EosSignData* EosSignData::internal_default_instance() {
  return &EosSignData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxInput::kPathFieldNumber;
const int EosTxInput::kSignDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxInput::EosTxInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosTxInput)
}

void EosTxInput::InitAsDefaultInstance() {
}

EosTxInput::EosTxInput(const EosTxInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosTxInput)
}

void EosTxInput::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosTxInput::~EosTxInput() {
  // @@protoc_insertion_point(destructor:eosapi.EosTxInput)
  SharedDtor();
}

void EosTxInput::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosTxInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosTxInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosTxInput_descriptor_;
}

const EosTxInput& EosTxInput::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosTxInput> EosTxInput_default_instance_;

EosTxInput* EosTxInput::New(::google::protobuf::Arena* arena) const {
  EosTxInput* n = new EosTxInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosTxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosTxInput)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_datas_.Clear();
}

bool EosTxInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosTxInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosTxInput.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_datas;
        break;
      }

      // repeated .eosapi.EosSignData sign_datas = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_datas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sign_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sign_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_sign_datas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosTxInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosTxInput)
  return false;
#undef DO_
}

void EosTxInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosTxInput)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxInput.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // repeated .eosapi.EosSignData sign_datas = 2;
  for (unsigned int i = 0, n = this->sign_datas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sign_datas(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosTxInput)
}

::google::protobuf::uint8* EosTxInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosTxInput)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxInput.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated .eosapi.EosSignData sign_datas = 2;
  for (unsigned int i = 0, n = this->sign_datas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sign_datas(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosTxInput)
  return target;
}

size_t EosTxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosTxInput)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // repeated .eosapi.EosSignData sign_datas = 2;
  {
    unsigned int count = this->sign_datas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_datas(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosTxInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosTxInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosTxInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosTxInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosTxInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosTxInput)
    UnsafeMergeFrom(*source);
  }
}

void EosTxInput::MergeFrom(const EosTxInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosTxInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosTxInput::UnsafeMergeFrom(const EosTxInput& from) {
  GOOGLE_DCHECK(&from != this);
  sign_datas_.MergeFrom(from.sign_datas_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void EosTxInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosTxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxInput::CopyFrom(const EosTxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosTxInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosTxInput::IsInitialized() const {

  return true;
}

void EosTxInput::Swap(EosTxInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxInput::InternalSwap(EosTxInput* other) {
  path_.Swap(&other->path_);
  sign_datas_.UnsafeArenaSwap(&other->sign_datas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosTxInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosTxInput_descriptor_;
  metadata.reflection = EosTxInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosTxInput

// optional string path = 1;
void EosTxInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosTxInput::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosTxInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosTxInput.path)
}
void EosTxInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxInput.path)
}
void EosTxInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxInput.path)
}
::std::string* EosTxInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosTxInput::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosTxInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosTxInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosTxInput.path)
}

// repeated .eosapi.EosSignData sign_datas = 2;
int EosTxInput::sign_datas_size() const {
  return sign_datas_.size();
}
void EosTxInput::clear_sign_datas() {
  sign_datas_.Clear();
}
const ::eosapi::EosSignData& EosTxInput::sign_datas(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxInput.sign_datas)
  return sign_datas_.Get(index);
}
::eosapi::EosSignData* EosTxInput::mutable_sign_datas(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxInput.sign_datas)
  return sign_datas_.Mutable(index);
}
::eosapi::EosSignData* EosTxInput::add_sign_datas() {
  // @@protoc_insertion_point(field_add:eosapi.EosTxInput.sign_datas)
  return sign_datas_.Add();
}
::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >*
EosTxInput::mutable_sign_datas() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxInput.sign_datas)
  return &sign_datas_;
}
const ::google::protobuf::RepeatedPtrField< ::eosapi::EosSignData >&
EosTxInput::sign_datas() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxInput.sign_datas)
  return sign_datas_;
}

inline const EosTxInput* EosTxInput::internal_default_instance() {
  return &EosTxInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxOutput::kHashFieldNumber;
const int EosTxOutput::kSignsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxOutput::EosTxOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosTxOutput)
}

void EosTxOutput::InitAsDefaultInstance() {
}

EosTxOutput::EosTxOutput(const EosTxOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosTxOutput)
}

void EosTxOutput::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosTxOutput::~EosTxOutput() {
  // @@protoc_insertion_point(destructor:eosapi.EosTxOutput)
  SharedDtor();
}

void EosTxOutput::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosTxOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosTxOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosTxOutput_descriptor_;
}

const EosTxOutput& EosTxOutput::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosTxOutput> EosTxOutput_default_instance_;

EosTxOutput* EosTxOutput::New(::google::protobuf::Arena* arena) const {
  EosTxOutput* n = new EosTxOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosTxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosTxOutput)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signs_.Clear();
}

bool EosTxOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosTxOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosTxOutput.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signs;
        break;
      }

      // repeated string signs = 2;
      case 2: {
        if (tag == 18) {
         parse_signs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signs(this->signs_size() - 1).data(),
            this->signs(this->signs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosTxOutput.signs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosTxOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosTxOutput)
  return false;
#undef DO_
}

void EosTxOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosTxOutput)
  // optional string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxOutput.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // repeated string signs = 2;
  for (int i = 0; i < this->signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signs(i).data(), this->signs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxOutput.signs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosTxOutput)
}

::google::protobuf::uint8* EosTxOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosTxOutput)
  // optional string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxOutput.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // repeated string signs = 2;
  for (int i = 0; i < this->signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signs(i).data(), this->signs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosTxOutput.signs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->signs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosTxOutput)
  return target;
}

size_t EosTxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosTxOutput)
  size_t total_size = 0;

  // optional string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // repeated string signs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signs_size());
  for (int i = 0; i < this->signs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosTxOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosTxOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosTxOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosTxOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosTxOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosTxOutput)
    UnsafeMergeFrom(*source);
  }
}

void EosTxOutput::MergeFrom(const EosTxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosTxOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosTxOutput::UnsafeMergeFrom(const EosTxOutput& from) {
  GOOGLE_DCHECK(&from != this);
  signs_.UnsafeMergeFrom(from.signs_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void EosTxOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosTxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxOutput::CopyFrom(const EosTxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosTxOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosTxOutput::IsInitialized() const {

  return true;
}

void EosTxOutput::Swap(EosTxOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxOutput::InternalSwap(EosTxOutput* other) {
  hash_.Swap(&other->hash_);
  signs_.UnsafeArenaSwap(&other->signs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosTxOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosTxOutput_descriptor_;
  metadata.reflection = EosTxOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosTxOutput

// optional string hash = 1;
void EosTxOutput::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosTxOutput::hash() const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxOutput.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosTxOutput::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosTxOutput.hash)
}
void EosTxOutput::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxOutput.hash)
}
void EosTxOutput::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxOutput.hash)
}
::std::string* EosTxOutput::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxOutput.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosTxOutput::release_hash() {
  // @@protoc_insertion_point(field_release:eosapi.EosTxOutput.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosTxOutput::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosTxOutput.hash)
}

// repeated string signs = 2;
int EosTxOutput::signs_size() const {
  return signs_.size();
}
void EosTxOutput::clear_signs() {
  signs_.Clear();
}
const ::std::string& EosTxOutput::signs(int index) const {
  // @@protoc_insertion_point(field_get:eosapi.EosTxOutput.signs)
  return signs_.Get(index);
}
::std::string* EosTxOutput::mutable_signs(int index) {
  // @@protoc_insertion_point(field_mutable:eosapi.EosTxOutput.signs)
  return signs_.Mutable(index);
}
void EosTxOutput::set_signs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eosapi.EosTxOutput.signs)
  signs_.Mutable(index)->assign(value);
}
void EosTxOutput::set_signs(int index, const char* value) {
  signs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eosapi.EosTxOutput.signs)
}
void EosTxOutput::set_signs(int index, const char* value, size_t size) {
  signs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosTxOutput.signs)
}
::std::string* EosTxOutput::add_signs() {
  // @@protoc_insertion_point(field_add_mutable:eosapi.EosTxOutput.signs)
  return signs_.Add();
}
void EosTxOutput::add_signs(const ::std::string& value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eosapi.EosTxOutput.signs)
}
void EosTxOutput::add_signs(const char* value) {
  signs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eosapi.EosTxOutput.signs)
}
void EosTxOutput::add_signs(const char* value, size_t size) {
  signs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eosapi.EosTxOutput.signs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EosTxOutput::signs() const {
  // @@protoc_insertion_point(field_list:eosapi.EosTxOutput.signs)
  return signs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EosTxOutput::mutable_signs() {
  // @@protoc_insertion_point(field_mutable_list:eosapi.EosTxOutput.signs)
  return &signs_;
}

inline const EosTxOutput* EosTxOutput::internal_default_instance() {
  return &EosTxOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosPubkey::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosPubkey::EosPubkey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosPubkey)
}

void EosPubkey::InitAsDefaultInstance() {
}

EosPubkey::EosPubkey(const EosPubkey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosPubkey)
}

void EosPubkey::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosPubkey::~EosPubkey() {
  // @@protoc_insertion_point(destructor:eosapi.EosPubkey)
  SharedDtor();
}

void EosPubkey::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosPubkey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosPubkey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosPubkey_descriptor_;
}

const EosPubkey& EosPubkey::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosPubkey> EosPubkey_default_instance_;

EosPubkey* EosPubkey::New(::google::protobuf::Arena* arena) const {
  EosPubkey* n = new EosPubkey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosPubkey::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosPubkey)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosPubkey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosPubkey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosPubkey.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosPubkey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosPubkey)
  return false;
#undef DO_
}

void EosPubkey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosPubkey)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkey.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosPubkey)
}

::google::protobuf::uint8* EosPubkey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosPubkey)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkey.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosPubkey)
  return target;
}

size_t EosPubkey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosPubkey)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosPubkey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosPubkey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosPubkey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosPubkey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosPubkey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosPubkey)
    UnsafeMergeFrom(*source);
  }
}

void EosPubkey::MergeFrom(const EosPubkey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosPubkey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosPubkey::UnsafeMergeFrom(const EosPubkey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void EosPubkey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosPubkey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosPubkey::CopyFrom(const EosPubkey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosPubkey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosPubkey::IsInitialized() const {

  return true;
}

void EosPubkey::Swap(EosPubkey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosPubkey::InternalSwap(EosPubkey* other) {
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosPubkey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosPubkey_descriptor_;
  metadata.reflection = EosPubkey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosPubkey

// optional string path = 1;
void EosPubkey::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosPubkey::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkey.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkey::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkey.path)
}
void EosPubkey::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkey.path)
}
void EosPubkey::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkey.path)
}
::std::string* EosPubkey::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkey.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosPubkey::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkey.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkey::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkey.path)
}

inline const EosPubkey* EosPubkey::internal_default_instance() {
  return &EosPubkey_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosPubkeyResponse::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosPubkeyResponse::EosPubkeyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosPubkeyResponse)
}

void EosPubkeyResponse::InitAsDefaultInstance() {
}

EosPubkeyResponse::EosPubkeyResponse(const EosPubkeyResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosPubkeyResponse)
}

void EosPubkeyResponse::SharedCtor() {
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosPubkeyResponse::~EosPubkeyResponse() {
  // @@protoc_insertion_point(destructor:eosapi.EosPubkeyResponse)
  SharedDtor();
}

void EosPubkeyResponse::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosPubkeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosPubkeyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosPubkeyResponse_descriptor_;
}

const EosPubkeyResponse& EosPubkeyResponse::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosPubkeyResponse> EosPubkeyResponse_default_instance_;

EosPubkeyResponse* EosPubkeyResponse::New(::google::protobuf::Arena* arena) const {
  EosPubkeyResponse* n = new EosPubkeyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosPubkeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosPubkeyResponse)
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosPubkeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosPubkeyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pubkey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pubkey().data(), this->pubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosPubkeyResponse.pubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosPubkeyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosPubkeyResponse)
  return false;
#undef DO_
}

void EosPubkeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosPubkeyResponse)
  // optional string pubkey = 1;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkeyResponse.pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pubkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosPubkeyResponse)
}

::google::protobuf::uint8* EosPubkeyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosPubkeyResponse)
  // optional string pubkey = 1;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosPubkeyResponse.pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pubkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosPubkeyResponse)
  return target;
}

size_t EosPubkeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosPubkeyResponse)
  size_t total_size = 0;

  // optional string pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pubkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosPubkeyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosPubkeyResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosPubkeyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosPubkeyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosPubkeyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosPubkeyResponse)
    UnsafeMergeFrom(*source);
  }
}

void EosPubkeyResponse::MergeFrom(const EosPubkeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosPubkeyResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosPubkeyResponse::UnsafeMergeFrom(const EosPubkeyResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
}

void EosPubkeyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosPubkeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosPubkeyResponse::CopyFrom(const EosPubkeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosPubkeyResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosPubkeyResponse::IsInitialized() const {

  return true;
}

void EosPubkeyResponse::Swap(EosPubkeyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosPubkeyResponse::InternalSwap(EosPubkeyResponse* other) {
  pubkey_.Swap(&other->pubkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosPubkeyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosPubkeyResponse_descriptor_;
  metadata.reflection = EosPubkeyResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosPubkeyResponse

// optional string pubkey = 1;
void EosPubkeyResponse::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosPubkeyResponse::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosPubkeyResponse.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkeyResponse::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosPubkeyResponse.pubkey)
}
void EosPubkeyResponse::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosPubkeyResponse.pubkey)
}
void EosPubkeyResponse::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosPubkeyResponse.pubkey)
}
::std::string* EosPubkeyResponse::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosPubkeyResponse.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosPubkeyResponse::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosPubkeyResponse.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosPubkeyResponse::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosPubkeyResponse.pubkey)
}

inline const EosPubkeyResponse* EosPubkeyResponse::internal_default_instance() {
  return &EosPubkeyResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosMessageInput::kPathFieldNumber;
const int EosMessageInput::kDataFieldNumber;
const int EosMessageInput::kIsHexFieldNumber;
const int EosMessageInput::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosMessageInput::EosMessageInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosMessageInput)
}

void EosMessageInput::InitAsDefaultInstance() {
}

EosMessageInput::EosMessageInput(const EosMessageInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosMessageInput)
}

void EosMessageInput::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_hex_ = false;
  _cached_size_ = 0;
}

EosMessageInput::~EosMessageInput() {
  // @@protoc_insertion_point(destructor:eosapi.EosMessageInput)
  SharedDtor();
}

void EosMessageInput::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosMessageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosMessageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosMessageInput_descriptor_;
}

const EosMessageInput& EosMessageInput::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosMessageInput> EosMessageInput_default_instance_;

EosMessageInput* EosMessageInput::New(::google::protobuf::Arena* arena) const {
  EosMessageInput* n = new EosMessageInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosMessageInput::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosMessageInput)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_hex_ = false;
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosMessageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosMessageInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageInput.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageInput.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_hex;
        break;
      }

      // optional bool is_hex = 3;
      case 3: {
        if (tag == 24) {
         parse_is_hex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pubkey;
        break;
      }

      // optional string pubkey = 4;
      case 4: {
        if (tag == 34) {
         parse_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pubkey().data(), this->pubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageInput.pubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosMessageInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosMessageInput)
  return false;
#undef DO_
}

void EosMessageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosMessageInput)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageInput.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageInput.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // optional bool is_hex = 3;
  if (this->is_hex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_hex(), output);
  }

  // optional string pubkey = 4;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageInput.pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pubkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosMessageInput)
}

::google::protobuf::uint8* EosMessageInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosMessageInput)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageInput.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageInput.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional bool is_hex = 3;
  if (this->is_hex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_hex(), target);
  }

  // optional string pubkey = 4;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), this->pubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageInput.pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pubkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosMessageInput)
  return target;
}

size_t EosMessageInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosMessageInput)
  size_t total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // optional bool is_hex = 3;
  if (this->is_hex() != 0) {
    total_size += 1 + 1;
  }

  // optional string pubkey = 4;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pubkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosMessageInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosMessageInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosMessageInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosMessageInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosMessageInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosMessageInput)
    UnsafeMergeFrom(*source);
  }
}

void EosMessageInput::MergeFrom(const EosMessageInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosMessageInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosMessageInput::UnsafeMergeFrom(const EosMessageInput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.is_hex() != 0) {
    set_is_hex(from.is_hex());
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
}

void EosMessageInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosMessageInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosMessageInput::CopyFrom(const EosMessageInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosMessageInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosMessageInput::IsInitialized() const {

  return true;
}

void EosMessageInput::Swap(EosMessageInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosMessageInput::InternalSwap(EosMessageInput* other) {
  path_.Swap(&other->path_);
  data_.Swap(&other->data_);
  std::swap(is_hex_, other->is_hex_);
  pubkey_.Swap(&other->pubkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosMessageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosMessageInput_descriptor_;
  metadata.reflection = EosMessageInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosMessageInput

// optional string path = 1;
void EosMessageInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageInput::path() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.path)
}
void EosMessageInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.path)
}
void EosMessageInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.path)
}
::std::string* EosMessageInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageInput::release_path() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.path)
}

// optional string data = 2;
void EosMessageInput::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageInput::data() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageInput::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.data)
}
void EosMessageInput::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.data)
}
void EosMessageInput::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.data)
}
::std::string* EosMessageInput::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageInput::release_data() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageInput::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.data)
}

// optional bool is_hex = 3;
void EosMessageInput::clear_is_hex() {
  is_hex_ = false;
}
bool EosMessageInput::is_hex() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.is_hex)
  return is_hex_;
}
void EosMessageInput::set_is_hex(bool value) {
  
  is_hex_ = value;
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.is_hex)
}

// optional string pubkey = 4;
void EosMessageInput::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageInput::pubkey() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageInput.pubkey)
  return pubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageInput::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageInput.pubkey)
}
void EosMessageInput::set_pubkey(const char* value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageInput.pubkey)
}
void EosMessageInput::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageInput.pubkey)
}
::std::string* EosMessageInput::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageInput.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageInput::release_pubkey() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageInput.pubkey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageInput::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageInput.pubkey)
}

inline const EosMessageInput* EosMessageInput::internal_default_instance() {
  return &EosMessageInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosMessageOutput::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosMessageOutput::EosMessageOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_eos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:eosapi.EosMessageOutput)
}

void EosMessageOutput::InitAsDefaultInstance() {
}

EosMessageOutput::EosMessageOutput(const EosMessageOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eosapi.EosMessageOutput)
}

void EosMessageOutput::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EosMessageOutput::~EosMessageOutput() {
  // @@protoc_insertion_point(destructor:eosapi.EosMessageOutput)
  SharedDtor();
}

void EosMessageOutput::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosMessageOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EosMessageOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EosMessageOutput_descriptor_;
}

const EosMessageOutput& EosMessageOutput::default_instance() {
  protobuf_InitDefaults_eos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EosMessageOutput> EosMessageOutput_default_instance_;

EosMessageOutput* EosMessageOutput::New(::google::protobuf::Arena* arena) const {
  EosMessageOutput* n = new EosMessageOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EosMessageOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:eosapi.EosMessageOutput)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EosMessageOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eosapi.EosMessageOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eosapi.EosMessageOutput.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eosapi.EosMessageOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eosapi.EosMessageOutput)
  return false;
#undef DO_
}

void EosMessageOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eosapi.EosMessageOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageOutput.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:eosapi.EosMessageOutput)
}

::google::protobuf::uint8* EosMessageOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eosapi.EosMessageOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eosapi.EosMessageOutput.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eosapi.EosMessageOutput)
  return target;
}

size_t EosMessageOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eosapi.EosMessageOutput)
  size_t total_size = 0;

  // optional string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EosMessageOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eosapi.EosMessageOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EosMessageOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EosMessageOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eosapi.EosMessageOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eosapi.EosMessageOutput)
    UnsafeMergeFrom(*source);
  }
}

void EosMessageOutput::MergeFrom(const EosMessageOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eosapi.EosMessageOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EosMessageOutput::UnsafeMergeFrom(const EosMessageOutput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void EosMessageOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eosapi.EosMessageOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosMessageOutput::CopyFrom(const EosMessageOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eosapi.EosMessageOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EosMessageOutput::IsInitialized() const {

  return true;
}

void EosMessageOutput::Swap(EosMessageOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosMessageOutput::InternalSwap(EosMessageOutput* other) {
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EosMessageOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EosMessageOutput_descriptor_;
  metadata.reflection = EosMessageOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EosMessageOutput

// optional string signature = 1;
void EosMessageOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EosMessageOutput::signature() const {
  // @@protoc_insertion_point(field_get:eosapi.EosMessageOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eosapi.EosMessageOutput.signature)
}
void EosMessageOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eosapi.EosMessageOutput.signature)
}
void EosMessageOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eosapi.EosMessageOutput.signature)
}
::std::string* EosMessageOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:eosapi.EosMessageOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EosMessageOutput::release_signature() {
  // @@protoc_insertion_point(field_release:eosapi.EosMessageOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EosMessageOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:eosapi.EosMessageOutput.signature)
}

inline const EosMessageOutput* EosMessageOutput::internal_default_instance() {
  return &EosMessageOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace eosapi

// @@protoc_insertion_point(global_scope)
