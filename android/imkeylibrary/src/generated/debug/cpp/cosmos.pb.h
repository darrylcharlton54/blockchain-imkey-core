// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos.proto

#ifndef PROTOBUF_cosmos_2eproto__INCLUDED
#define PROTOBUF_cosmos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace cosmosapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cosmos_2eproto();
void protobuf_InitDefaults_cosmos_2eproto();
void protobuf_AssignDesc_cosmos_2eproto();
void protobuf_ShutdownFile_cosmos_2eproto();

class Coin;
class CosmosTxInput;
class CosmosTxOutput;
class StdFee;

// ===================================================================

class Coin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.Coin) */ {
 public:
  Coin();
  virtual ~Coin();

  Coin(const Coin& from);

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Coin& default_instance();

  static const Coin* internal_default_instance();

  void Swap(Coin* other);

  // implements Message ----------------------------------------------

  inline Coin* New() const { return New(NULL); }

  Coin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Coin& from);
  void MergeFrom(const Coin& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Coin* other);
  void UnsafeMergeFrom(const Coin& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional string denom = 2;
  void clear_denom();
  static const int kDenomFieldNumber = 2;
  const ::std::string& denom() const;
  void set_denom(const ::std::string& value);
  void set_denom(const char* value);
  void set_denom(const char* value, size_t size);
  ::std::string* mutable_denom();
  ::std::string* release_denom();
  void set_allocated_denom(::std::string* denom);

  // @@protoc_insertion_point(class_scope:cosmosapi.Coin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr denom_;
  ::google::protobuf::uint64 amount_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Coin> Coin_default_instance_;

// -------------------------------------------------------------------

class StdFee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.StdFee) */ {
 public:
  StdFee();
  virtual ~StdFee();

  StdFee(const StdFee& from);

  inline StdFee& operator=(const StdFee& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StdFee& default_instance();

  static const StdFee* internal_default_instance();

  void Swap(StdFee* other);

  // implements Message ----------------------------------------------

  inline StdFee* New() const { return New(NULL); }

  StdFee* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StdFee& from);
  void MergeFrom(const StdFee& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StdFee* other);
  void UnsafeMergeFrom(const StdFee& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmosapi.Coin amount = 1;
  int amount_size() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::cosmosapi::Coin& amount(int index) const;
  ::cosmosapi::Coin* mutable_amount(int index);
  ::cosmosapi::Coin* add_amount();
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
      mutable_amount();
  const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
      amount() const;

  // optional uint64 gas = 2;
  void clear_gas();
  static const int kGasFieldNumber = 2;
  ::google::protobuf::uint64 gas() const;
  void set_gas(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmosapi.StdFee)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin > amount_;
  ::google::protobuf::uint64 gas_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StdFee> StdFee_default_instance_;

// -------------------------------------------------------------------

class CosmosTxInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.CosmosTxInput) */ {
 public:
  CosmosTxInput();
  virtual ~CosmosTxInput();

  CosmosTxInput(const CosmosTxInput& from);

  inline CosmosTxInput& operator=(const CosmosTxInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmosTxInput& default_instance();

  static const CosmosTxInput* internal_default_instance();

  void Swap(CosmosTxInput* other);

  // implements Message ----------------------------------------------

  inline CosmosTxInput* New() const { return New(NULL); }

  CosmosTxInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CosmosTxInput& from);
  void MergeFrom(const CosmosTxInput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CosmosTxInput* other);
  void UnsafeMergeFrom(const CosmosTxInput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional uint64 account_number = 1;
  void clear_account_number();
  static const int kAccountNumberFieldNumber = 1;
  ::google::protobuf::uint64 account_number() const;
  void set_account_number(::google::protobuf::uint64 value);

  // optional string chain_id = 2;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 2;
  const ::std::string& chain_id() const;
  void set_chain_id(const ::std::string& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  ::std::string* mutable_chain_id();
  ::std::string* release_chain_id();
  void set_allocated_chain_id(::std::string* chain_id);

  // optional .cosmosapi.StdFee fee = 3;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  const ::cosmosapi::StdFee& fee() const;
  ::cosmosapi::StdFee* mutable_fee();
  ::cosmosapi::StdFee* release_fee();
  void set_allocated_fee(::cosmosapi::StdFee* fee);

  // optional string memo = 4;
  void clear_memo();
  static const int kMemoFieldNumber = 4;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // map<string, .google.protobuf.Any> msgs = 5;
  int msgs_size() const;
  void clear_msgs();
  static const int kMsgsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
      msgs() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
      mutable_msgs();

  // optional uint64 sequence = 6;
  void clear_sequence();
  static const int kSequenceFieldNumber = 6;
  ::google::protobuf::uint64 sequence() const;
  void set_sequence(::google::protobuf::uint64 value);

  // optional string path = 7;
  void clear_path();
  static const int kPathFieldNumber = 7;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string payment_dis = 8;
  void clear_payment_dis();
  static const int kPaymentDisFieldNumber = 8;
  const ::std::string& payment_dis() const;
  void set_payment_dis(const ::std::string& value);
  void set_payment_dis(const char* value);
  void set_payment_dis(const char* value, size_t size);
  ::std::string* mutable_payment_dis();
  ::std::string* release_payment_dis();
  void set_allocated_payment_dis(::std::string* payment_dis);

  // optional string to_dis = 9;
  void clear_to_dis();
  static const int kToDisFieldNumber = 9;
  const ::std::string& to_dis() const;
  void set_to_dis(const ::std::string& value);
  void set_to_dis(const char* value);
  void set_to_dis(const char* value, size_t size);
  ::std::string* mutable_to_dis();
  ::std::string* release_to_dis();
  void set_allocated_to_dis(::std::string* to_dis);

  // optional string from_dis = 10;
  void clear_from_dis();
  static const int kFromDisFieldNumber = 10;
  const ::std::string& from_dis() const;
  void set_from_dis(const ::std::string& value);
  void set_from_dis(const char* value);
  void set_from_dis(const char* value, size_t size);
  ::std::string* mutable_from_dis();
  ::std::string* release_from_dis();
  void set_allocated_from_dis(::std::string* from_dis);

  // optional string fee_dis = 11;
  void clear_fee_dis();
  static const int kFeeDisFieldNumber = 11;
  const ::std::string& fee_dis() const;
  void set_fee_dis(const ::std::string& value);
  void set_fee_dis(const char* value);
  void set_fee_dis(const char* value, size_t size);
  ::std::string* mutable_fee_dis();
  ::std::string* release_fee_dis();
  void set_allocated_fee_dis(::std::string* fee_dis);

  // @@protoc_insertion_point(class_scope:cosmosapi.CosmosTxInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      CosmosTxInput_MsgsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > msgs_;
  ::google::protobuf::internal::ArenaStringPtr chain_id_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr payment_dis_;
  ::google::protobuf::internal::ArenaStringPtr to_dis_;
  ::google::protobuf::internal::ArenaStringPtr from_dis_;
  ::google::protobuf::internal::ArenaStringPtr fee_dis_;
  ::cosmosapi::StdFee* fee_;
  ::google::protobuf::uint64 account_number_;
  ::google::protobuf::uint64 sequence_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CosmosTxInput> CosmosTxInput_default_instance_;

// -------------------------------------------------------------------

class CosmosTxOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmosapi.CosmosTxOutput) */ {
 public:
  CosmosTxOutput();
  virtual ~CosmosTxOutput();

  CosmosTxOutput(const CosmosTxOutput& from);

  inline CosmosTxOutput& operator=(const CosmosTxOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmosTxOutput& default_instance();

  static const CosmosTxOutput* internal_default_instance();

  void Swap(CosmosTxOutput* other);

  // implements Message ----------------------------------------------

  inline CosmosTxOutput* New() const { return New(NULL); }

  CosmosTxOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CosmosTxOutput& from);
  void MergeFrom(const CosmosTxOutput& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CosmosTxOutput* other);
  void UnsafeMergeFrom(const CosmosTxOutput& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string txHash = 2;
  void clear_txhash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // @@protoc_insertion_point(class_scope:cosmosapi.CosmosTxOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_cosmos_2eproto_impl();
  friend void  protobuf_AddDesc_cosmos_2eproto_impl();
  friend void protobuf_AssignDesc_cosmos_2eproto();
  friend void protobuf_ShutdownFile_cosmos_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CosmosTxOutput> CosmosTxOutput_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Coin

// optional uint64 amount = 1;
inline void Coin::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Coin::amount() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.amount)
  return amount_;
}
inline void Coin::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.amount)
}

// optional string denom = 2;
inline void Coin::clear_denom() {
  denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coin::denom() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.denom)
  return denom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coin::set_denom(const ::std::string& value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.denom)
}
inline void Coin::set_denom(const char* value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Coin.denom)
}
inline void Coin::set_denom(const char* value, size_t size) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Coin.denom)
}
inline ::std::string* Coin::mutable_denom() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Coin.denom)
  return denom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coin::release_denom() {
  // @@protoc_insertion_point(field_release:cosmosapi.Coin.denom)
  
  return denom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coin::set_allocated_denom(::std::string* denom) {
  if (denom != NULL) {
    
  } else {
    
  }
  denom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denom);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Coin.denom)
}

inline const Coin* Coin::internal_default_instance() {
  return &Coin_default_instance_.get();
}
// -------------------------------------------------------------------

// StdFee

// repeated .cosmosapi.Coin amount = 1;
inline int StdFee::amount_size() const {
  return amount_.size();
}
inline void StdFee::clear_amount() {
  amount_.Clear();
}
inline const ::cosmosapi::Coin& StdFee::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.amount)
  return amount_.Get(index);
}
inline ::cosmosapi::Coin* StdFee::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.StdFee.amount)
  return amount_.Mutable(index);
}
inline ::cosmosapi::Coin* StdFee::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.StdFee.amount)
  return amount_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
StdFee::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.StdFee.amount)
  return &amount_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
StdFee::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.StdFee.amount)
  return amount_;
}

// optional uint64 gas = 2;
inline void StdFee::clear_gas() {
  gas_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StdFee::gas() const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.gas)
  return gas_;
}
inline void StdFee::set_gas(::google::protobuf::uint64 value) {
  
  gas_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.StdFee.gas)
}

inline const StdFee* StdFee::internal_default_instance() {
  return &StdFee_default_instance_.get();
}
// -------------------------------------------------------------------

// CosmosTxInput

// optional uint64 account_number = 1;
inline void CosmosTxInput::clear_account_number() {
  account_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CosmosTxInput::account_number() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.account_number)
  return account_number_;
}
inline void CosmosTxInput::set_account_number(::google::protobuf::uint64 value) {
  
  account_number_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.account_number)
}

// optional string chain_id = 2;
inline void CosmosTxInput::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxInput::chain_id() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.chain_id)
}
inline void CosmosTxInput::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.chain_id)
}
inline void CosmosTxInput::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.chain_id)
}
inline ::std::string* CosmosTxInput::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.chain_id)
}

// optional .cosmosapi.StdFee fee = 3;
inline bool CosmosTxInput::has_fee() const {
  return this != internal_default_instance() && fee_ != NULL;
}
inline void CosmosTxInput::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
inline const ::cosmosapi::StdFee& CosmosTxInput::fee() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.fee)
  return fee_ != NULL ? *fee_
                         : *::cosmosapi::StdFee::internal_default_instance();
}
inline ::cosmosapi::StdFee* CosmosTxInput::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::cosmosapi::StdFee;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.fee)
  return fee_;
}
inline ::cosmosapi::StdFee* CosmosTxInput::release_fee() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.fee)
  
  ::cosmosapi::StdFee* temp = fee_;
  fee_ = NULL;
  return temp;
}
inline void CosmosTxInput::set_allocated_fee(::cosmosapi::StdFee* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.fee)
}

// optional string memo = 4;
inline void CosmosTxInput::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxInput::memo() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.memo)
  return memo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_memo(const ::std::string& value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.memo)
}
inline void CosmosTxInput::set_memo(const char* value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.memo)
}
inline void CosmosTxInput::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.memo)
}
inline ::std::string* CosmosTxInput::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxInput::release_memo() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.memo)
  
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.memo)
}

// map<string, .google.protobuf.Any> msgs = 5;
inline int CosmosTxInput::msgs_size() const {
  return msgs_.size();
}
inline void CosmosTxInput::clear_msgs() {
  msgs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
CosmosTxInput::msgs() const {
  // @@protoc_insertion_point(field_map:cosmosapi.CosmosTxInput.msgs)
  return msgs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
CosmosTxInput::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_map:cosmosapi.CosmosTxInput.msgs)
  return msgs_.MutableMap();
}

// optional uint64 sequence = 6;
inline void CosmosTxInput::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CosmosTxInput::sequence() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.sequence)
  return sequence_;
}
inline void CosmosTxInput::set_sequence(::google::protobuf::uint64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.sequence)
}

// optional string path = 7;
inline void CosmosTxInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxInput::path() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.path)
}
inline void CosmosTxInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.path)
}
inline void CosmosTxInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.path)
}
inline ::std::string* CosmosTxInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxInput::release_path() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.path)
}

// optional string payment_dis = 8;
inline void CosmosTxInput::clear_payment_dis() {
  payment_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxInput::payment_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.payment_dis)
  return payment_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_payment_dis(const ::std::string& value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.payment_dis)
}
inline void CosmosTxInput::set_payment_dis(const char* value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.payment_dis)
}
inline void CosmosTxInput::set_payment_dis(const char* value, size_t size) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.payment_dis)
}
inline ::std::string* CosmosTxInput::mutable_payment_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.payment_dis)
  return payment_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxInput::release_payment_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.payment_dis)
  
  return payment_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_allocated_payment_dis(::std::string* payment_dis) {
  if (payment_dis != NULL) {
    
  } else {
    
  }
  payment_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.payment_dis)
}

// optional string to_dis = 9;
inline void CosmosTxInput::clear_to_dis() {
  to_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxInput::to_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.to_dis)
  return to_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_to_dis(const ::std::string& value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.to_dis)
}
inline void CosmosTxInput::set_to_dis(const char* value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.to_dis)
}
inline void CosmosTxInput::set_to_dis(const char* value, size_t size) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.to_dis)
}
inline ::std::string* CosmosTxInput::mutable_to_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.to_dis)
  return to_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxInput::release_to_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.to_dis)
  
  return to_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_allocated_to_dis(::std::string* to_dis) {
  if (to_dis != NULL) {
    
  } else {
    
  }
  to_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.to_dis)
}

// optional string from_dis = 10;
inline void CosmosTxInput::clear_from_dis() {
  from_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxInput::from_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.from_dis)
  return from_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_from_dis(const ::std::string& value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.from_dis)
}
inline void CosmosTxInput::set_from_dis(const char* value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.from_dis)
}
inline void CosmosTxInput::set_from_dis(const char* value, size_t size) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.from_dis)
}
inline ::std::string* CosmosTxInput::mutable_from_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.from_dis)
  return from_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxInput::release_from_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.from_dis)
  
  return from_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_allocated_from_dis(::std::string* from_dis) {
  if (from_dis != NULL) {
    
  } else {
    
  }
  from_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.from_dis)
}

// optional string fee_dis = 11;
inline void CosmosTxInput::clear_fee_dis() {
  fee_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxInput::fee_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.fee_dis)
  return fee_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_fee_dis(const ::std::string& value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.fee_dis)
}
inline void CosmosTxInput::set_fee_dis(const char* value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.fee_dis)
}
inline void CosmosTxInput::set_fee_dis(const char* value, size_t size) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.fee_dis)
}
inline ::std::string* CosmosTxInput::mutable_fee_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.fee_dis)
  return fee_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxInput::release_fee_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.fee_dis)
  
  return fee_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxInput::set_allocated_fee_dis(::std::string* fee_dis) {
  if (fee_dis != NULL) {
    
  } else {
    
  }
  fee_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.fee_dis)
}

inline const CosmosTxInput* CosmosTxInput::internal_default_instance() {
  return &CosmosTxInput_default_instance_.get();
}
// -------------------------------------------------------------------

// CosmosTxOutput

// optional string signature = 1;
inline void CosmosTxOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxOutput::signature() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxOutput.signature)
}
inline void CosmosTxOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxOutput.signature)
}
inline void CosmosTxOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxOutput.signature)
}
inline ::std::string* CosmosTxOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxOutput::release_signature() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxOutput.signature)
}

// optional string txHash = 2;
inline void CosmosTxOutput::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmosTxOutput::txhash() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxOutput.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxOutput::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxOutput.txHash)
}
inline void CosmosTxOutput::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxOutput.txHash)
}
inline void CosmosTxOutput::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxOutput.txHash)
}
inline ::std::string* CosmosTxOutput::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxOutput.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmosTxOutput::release_txhash() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxOutput.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmosTxOutput::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxOutput.txHash)
}

inline const CosmosTxOutput* CosmosTxOutput::internal_default_instance() {
  return &CosmosTxOutput_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cosmosapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmos_2eproto__INCLUDED
