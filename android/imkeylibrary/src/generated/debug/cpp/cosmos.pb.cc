// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmosapi {

namespace {

const ::google::protobuf::Descriptor* Coin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coin_reflection_ = NULL;
const ::google::protobuf::Descriptor* StdFee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StdFee_reflection_ = NULL;
const ::google::protobuf::Descriptor* CosmosTxInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CosmosTxInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CosmosTxInput_MsgsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CosmosTxOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CosmosTxOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cosmos_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cosmos_2eproto() {
  protobuf_AddDesc_cosmos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cosmos.proto");
  GOOGLE_CHECK(file != NULL);
  Coin_descriptor_ = file->message_type(0);
  static const int Coin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, denom_),
  };
  Coin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Coin_descriptor_,
      Coin::internal_default_instance(),
      Coin_offsets_,
      -1,
      -1,
      -1,
      sizeof(Coin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coin, _internal_metadata_));
  StdFee_descriptor_ = file->message_type(1);
  static const int StdFee_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdFee, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdFee, gas_),
  };
  StdFee_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StdFee_descriptor_,
      StdFee::internal_default_instance(),
      StdFee_offsets_,
      -1,
      -1,
      -1,
      sizeof(StdFee),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdFee, _internal_metadata_));
  CosmosTxInput_descriptor_ = file->message_type(2);
  static const int CosmosTxInput_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, account_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, memo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, payment_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, to_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, from_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, fee_dis_),
  };
  CosmosTxInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CosmosTxInput_descriptor_,
      CosmosTxInput::internal_default_instance(),
      CosmosTxInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(CosmosTxInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxInput, _internal_metadata_));
  CosmosTxInput_MsgsEntry_descriptor_ = CosmosTxInput_descriptor_->nested_type(0);
  CosmosTxOutput_descriptor_ = file->message_type(3);
  static const int CosmosTxOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxOutput, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxOutput, txhash_),
  };
  CosmosTxOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CosmosTxOutput_descriptor_,
      CosmosTxOutput::internal_default_instance(),
      CosmosTxOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(CosmosTxOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmosTxOutput, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cosmos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Coin_descriptor_, Coin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StdFee_descriptor_, StdFee::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CosmosTxInput_descriptor_, CosmosTxInput::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CosmosTxInput_MsgsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::Any,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                CosmosTxInput_MsgsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CosmosTxOutput_descriptor_, CosmosTxOutput::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cosmos_2eproto() {
  Coin_default_instance_.Shutdown();
  delete Coin_reflection_;
  StdFee_default_instance_.Shutdown();
  delete StdFee_reflection_;
  CosmosTxInput_default_instance_.Shutdown();
  delete CosmosTxInput_reflection_;
  CosmosTxOutput_default_instance_.Shutdown();
  delete CosmosTxOutput_reflection_;
}

void protobuf_InitDefaults_cosmos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Coin_default_instance_.DefaultConstruct();
  StdFee_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CosmosTxInput_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  CosmosTxOutput_default_instance_.DefaultConstruct();
  Coin_default_instance_.get_mutable()->InitAsDefaultInstance();
  StdFee_default_instance_.get_mutable()->InitAsDefaultInstance();
  CosmosTxInput_default_instance_.get_mutable()->InitAsDefaultInstance();
  CosmosTxOutput_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_cosmos_2eproto_once_);
void protobuf_InitDefaults_cosmos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_cosmos_2eproto_once_,
                 &protobuf_InitDefaults_cosmos_2eproto_impl);
}
void protobuf_AddDesc_cosmos_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_cosmos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014cosmos.proto\022\tcosmosapi\032\031google/protob"
    "uf/any.proto\"%\n\004Coin\022\016\n\006amount\030\001 \001(\004\022\r\n\005"
    "denom\030\002 \001(\t\"6\n\006StdFee\022\037\n\006amount\030\001 \003(\0132\017."
    "cosmosapi.Coin\022\013\n\003gas\030\002 \001(\004\"\304\002\n\rCosmosTx"
    "Input\022\026\n\016account_number\030\001 \001(\004\022\020\n\010chain_i"
    "d\030\002 \001(\t\022\036\n\003fee\030\003 \001(\0132\021.cosmosapi.StdFee\022"
    "\014\n\004memo\030\004 \001(\t\0220\n\004msgs\030\005 \003(\0132\".cosmosapi."
    "CosmosTxInput.MsgsEntry\022\020\n\010sequence\030\006 \001("
    "\004\022\014\n\004path\030\007 \001(\t\022\023\n\013payment_dis\030\010 \001(\t\022\016\n\006"
    "to_dis\030\t \001(\t\022\020\n\010from_dis\030\n \001(\t\022\017\n\007fee_di"
    "s\030\013 \001(\t\032A\n\tMsgsEntry\022\013\n\003key\030\001 \001(\t\022#\n\005val"
    "ue\030\002 \001(\0132\024.google.protobuf.Any:\0028\001\"3\n\016Co"
    "smosTxOutput\022\021\n\tsignature\030\001 \001(\t\022\016\n\006txHas"
    "h\030\002 \001(\tb\006proto3", 535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmos.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cosmos_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cosmos_2eproto_once_);
void protobuf_AddDesc_cosmos_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cosmos_2eproto_once_,
                 &protobuf_AddDesc_cosmos_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cosmos_2eproto {
  StaticDescriptorInitializer_cosmos_2eproto() {
    protobuf_AddDesc_cosmos_2eproto();
  }
} static_descriptor_initializer_cosmos_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coin::kAmountFieldNumber;
const int Coin::kDenomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coin::Coin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.Coin)
}

void Coin::InitAsDefaultInstance() {
}

Coin::Coin(const Coin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.Coin)
}

void Coin::SharedCtor() {
  denom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Coin::~Coin() {
  // @@protoc_insertion_point(destructor:cosmosapi.Coin)
  SharedDtor();
}

void Coin::SharedDtor() {
  denom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Coin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coin_descriptor_;
}

const Coin& Coin::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Coin> Coin_default_instance_;

Coin* Coin::New(::google::protobuf::Arena* arena) const {
  Coin* n = new Coin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Coin::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.Coin)
  amount_ = GOOGLE_ULONGLONG(0);
  denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Coin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.Coin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_denom;
        break;
      }

      // optional string denom = 2;
      case 2: {
        if (tag == 18) {
         parse_denom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->denom().data(), this->denom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.Coin.denom"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.Coin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.Coin)
  return false;
#undef DO_
}

void Coin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.Coin)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string denom = 2;
  if (this->denom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denom().data(), this->denom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Coin.denom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->denom(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.Coin)
}

::google::protobuf::uint8* Coin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.Coin)
  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string denom = 2;
  if (this->denom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denom().data(), this->denom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.Coin.denom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->denom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.Coin)
  return target;
}

size_t Coin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.Coin)
  size_t total_size = 0;

  // optional uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // optional string denom = 2;
  if (this->denom().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.Coin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Coin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Coin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.Coin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.Coin)
    UnsafeMergeFrom(*source);
  }
}

void Coin::MergeFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.Coin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Coin::UnsafeMergeFrom(const Coin& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.denom().size() > 0) {

    denom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denom_);
  }
}

void Coin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coin::CopyFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.Coin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Coin::IsInitialized() const {

  return true;
}

void Coin::Swap(Coin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coin::InternalSwap(Coin* other) {
  std::swap(amount_, other->amount_);
  denom_.Swap(&other->denom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Coin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coin_descriptor_;
  metadata.reflection = Coin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Coin

// optional uint64 amount = 1;
void Coin::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Coin::amount() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.amount)
  return amount_;
}
void Coin::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.amount)
}

// optional string denom = 2;
void Coin::clear_denom() {
  denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Coin::denom() const {
  // @@protoc_insertion_point(field_get:cosmosapi.Coin.denom)
  return denom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Coin::set_denom(const ::std::string& value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.Coin.denom)
}
void Coin::set_denom(const char* value) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.Coin.denom)
}
void Coin::set_denom(const char* value, size_t size) {
  
  denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.Coin.denom)
}
::std::string* Coin::mutable_denom() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.Coin.denom)
  return denom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Coin::release_denom() {
  // @@protoc_insertion_point(field_release:cosmosapi.Coin.denom)
  
  return denom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Coin::set_allocated_denom(::std::string* denom) {
  if (denom != NULL) {
    
  } else {
    
  }
  denom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denom);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.Coin.denom)
}

inline const Coin* Coin::internal_default_instance() {
  return &Coin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StdFee::kAmountFieldNumber;
const int StdFee::kGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StdFee::StdFee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.StdFee)
}

void StdFee::InitAsDefaultInstance() {
}

StdFee::StdFee(const StdFee& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.StdFee)
}

void StdFee::SharedCtor() {
  gas_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

StdFee::~StdFee() {
  // @@protoc_insertion_point(destructor:cosmosapi.StdFee)
  SharedDtor();
}

void StdFee::SharedDtor() {
}

void StdFee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StdFee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StdFee_descriptor_;
}

const StdFee& StdFee::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StdFee> StdFee_default_instance_;

StdFee* StdFee::New(::google::protobuf::Arena* arena) const {
  StdFee* n = new StdFee;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StdFee::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.StdFee)
  gas_ = GOOGLE_ULONGLONG(0);
  amount_.Clear();
}

bool StdFee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.StdFee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmosapi.Coin amount = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_amount;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_gas;
        break;
      }

      // optional uint64 gas = 2;
      case 2: {
        if (tag == 16) {
         parse_gas:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.StdFee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.StdFee)
  return false;
#undef DO_
}

void StdFee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.StdFee)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->amount(i), output);
  }

  // optional uint64 gas = 2;
  if (this->gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gas(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.StdFee)
}

::google::protobuf::uint8* StdFee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.StdFee)
  // repeated .cosmosapi.Coin amount = 1;
  for (unsigned int i = 0, n = this->amount_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->amount(i), false, target);
  }

  // optional uint64 gas = 2;
  if (this->gas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gas(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.StdFee)
  return target;
}

size_t StdFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.StdFee)
  size_t total_size = 0;

  // optional uint64 gas = 2;
  if (this->gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gas());
  }

  // repeated .cosmosapi.Coin amount = 1;
  {
    unsigned int count = this->amount_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amount(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StdFee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.StdFee)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StdFee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StdFee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.StdFee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.StdFee)
    UnsafeMergeFrom(*source);
  }
}

void StdFee::MergeFrom(const StdFee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.StdFee)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StdFee::UnsafeMergeFrom(const StdFee& from) {
  GOOGLE_DCHECK(&from != this);
  amount_.MergeFrom(from.amount_);
  if (from.gas() != 0) {
    set_gas(from.gas());
  }
}

void StdFee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.StdFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdFee::CopyFrom(const StdFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.StdFee)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StdFee::IsInitialized() const {

  return true;
}

void StdFee::Swap(StdFee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StdFee::InternalSwap(StdFee* other) {
  amount_.UnsafeArenaSwap(&other->amount_);
  std::swap(gas_, other->gas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StdFee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StdFee_descriptor_;
  metadata.reflection = StdFee_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StdFee

// repeated .cosmosapi.Coin amount = 1;
int StdFee::amount_size() const {
  return amount_.size();
}
void StdFee::clear_amount() {
  amount_.Clear();
}
const ::cosmosapi::Coin& StdFee::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.amount)
  return amount_.Get(index);
}
::cosmosapi::Coin* StdFee::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmosapi.StdFee.amount)
  return amount_.Mutable(index);
}
::cosmosapi::Coin* StdFee::add_amount() {
  // @@protoc_insertion_point(field_add:cosmosapi.StdFee.amount)
  return amount_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >*
StdFee::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmosapi.StdFee.amount)
  return &amount_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmosapi::Coin >&
StdFee::amount() const {
  // @@protoc_insertion_point(field_list:cosmosapi.StdFee.amount)
  return amount_;
}

// optional uint64 gas = 2;
void StdFee::clear_gas() {
  gas_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StdFee::gas() const {
  // @@protoc_insertion_point(field_get:cosmosapi.StdFee.gas)
  return gas_;
}
void StdFee::set_gas(::google::protobuf::uint64 value) {
  
  gas_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.StdFee.gas)
}

inline const StdFee* StdFee::internal_default_instance() {
  return &StdFee_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmosTxInput::kAccountNumberFieldNumber;
const int CosmosTxInput::kChainIdFieldNumber;
const int CosmosTxInput::kFeeFieldNumber;
const int CosmosTxInput::kMemoFieldNumber;
const int CosmosTxInput::kMsgsFieldNumber;
const int CosmosTxInput::kSequenceFieldNumber;
const int CosmosTxInput::kPathFieldNumber;
const int CosmosTxInput::kPaymentDisFieldNumber;
const int CosmosTxInput::kToDisFieldNumber;
const int CosmosTxInput::kFromDisFieldNumber;
const int CosmosTxInput::kFeeDisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmosTxInput::CosmosTxInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.CosmosTxInput)
}

void CosmosTxInput::InitAsDefaultInstance() {
  fee_ = const_cast< ::cosmosapi::StdFee*>(
      ::cosmosapi::StdFee::internal_default_instance());
}

CosmosTxInput::CosmosTxInput(const CosmosTxInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.CosmosTxInput)
}

void CosmosTxInput::SharedCtor() {
  msgs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  msgs_.SetEntryDescriptor(
      &::cosmosapi::CosmosTxInput_MsgsEntry_descriptor_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_dis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_ = NULL;
  ::memset(&account_number_, 0, reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&account_number_) + sizeof(sequence_));
  _cached_size_ = 0;
}

CosmosTxInput::~CosmosTxInput() {
  // @@protoc_insertion_point(destructor:cosmosapi.CosmosTxInput)
  SharedDtor();
}

void CosmosTxInput::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_dis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CosmosTxInput_default_instance_.get()) {
    delete fee_;
  }
}

void CosmosTxInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmosTxInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CosmosTxInput_descriptor_;
}

const CosmosTxInput& CosmosTxInput::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CosmosTxInput> CosmosTxInput_default_instance_;

CosmosTxInput* CosmosTxInput::New(::google::protobuf::Arena* arena) const {
  CosmosTxInput* n = new CosmosTxInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmosTxInput::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.CosmosTxInput)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CosmosTxInput, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CosmosTxInput*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(account_number_, sequence_);
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  msgs_.Clear();
}

bool CosmosTxInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.CosmosTxInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account_number = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chain_id;
        break;
      }

      // optional string chain_id = 2;
      case 2: {
        if (tag == 18) {
         parse_chain_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), this->chain_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.chain_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fee;
        break;
      }

      // optional .cosmosapi.StdFee fee = 3;
      case 3: {
        if (tag == 26) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memo;
        break;
      }

      // optional string memo = 4;
      case 4: {
        if (tag == 34) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->memo().data(), this->memo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.memo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msgs;
        break;
      }

      // map<string, .google.protobuf.Any> msgs = 5;
      case 5: {
        if (tag == 42) {
         parse_msgs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_msgs:
          CosmosTxInput_MsgsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::Any,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::Any > > parser(&msgs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.MsgsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_msgs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_sequence;
        break;
      }

      // optional uint64 sequence = 6;
      case 6: {
        if (tag == 48) {
         parse_sequence:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_path;
        break;
      }

      // optional string path = 7;
      case 7: {
        if (tag == 58) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_payment_dis;
        break;
      }

      // optional string payment_dis = 8;
      case 8: {
        if (tag == 66) {
         parse_payment_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payment_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payment_dis().data(), this->payment_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.payment_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_to_dis;
        break;
      }

      // optional string to_dis = 9;
      case 9: {
        if (tag == 74) {
         parse_to_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_dis().data(), this->to_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.to_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_from_dis;
        break;
      }

      // optional string from_dis = 10;
      case 10: {
        if (tag == 82) {
         parse_from_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_dis().data(), this->from_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.from_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fee_dis;
        break;
      }

      // optional string fee_dis = 11;
      case 11: {
        if (tag == 90) {
         parse_fee_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fee_dis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fee_dis().data(), this->fee_dis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxInput.fee_dis"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.CosmosTxInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.CosmosTxInput)
  return false;
#undef DO_
}

void CosmosTxInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.CosmosTxInput)
  // optional uint64 account_number = 1;
  if (this->account_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_number(), output);
  }

  // optional string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chain_id(), output);
  }

  // optional .cosmosapi.StdFee fee = 3;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fee_, output);
  }

  // optional string memo = 4;
  if (this->memo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->memo(), output);
  }

  // map<string, .google.protobuf.Any> msgs = 5;
  if (!this->msgs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cosmosapi.CosmosTxInput.MsgsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->msgs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->msgs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->msgs().begin();
          it != this->msgs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CosmosTxInput_MsgsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(msgs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CosmosTxInput_MsgsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->msgs().begin();
          it != this->msgs().end(); ++it) {
        entry.reset(msgs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional uint64 sequence = 6;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sequence(), output);
  }

  // optional string path = 7;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->path(), output);
  }

  // optional string payment_dis = 8;
  if (this->payment_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment_dis().data(), this->payment_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.payment_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->payment_dis(), output);
  }

  // optional string to_dis = 9;
  if (this->to_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_dis().data(), this->to_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.to_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->to_dis(), output);
  }

  // optional string from_dis = 10;
  if (this->from_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_dis().data(), this->from_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.from_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->from_dis(), output);
  }

  // optional string fee_dis = 11;
  if (this->fee_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee_dis().data(), this->fee_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.fee_dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->fee_dis(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.CosmosTxInput)
}

::google::protobuf::uint8* CosmosTxInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.CosmosTxInput)
  // optional uint64 account_number = 1;
  if (this->account_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_number(), target);
  }

  // optional string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chain_id(), target);
  }

  // optional .cosmosapi.StdFee fee = 3;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fee_, false, target);
  }

  // optional string memo = 4;
  if (this->memo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.memo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->memo(), target);
  }

  // map<string, .google.protobuf.Any> msgs = 5;
  if (!this->msgs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "cosmosapi.CosmosTxInput.MsgsEntry.key");
      }
    };

    if (deterministic &&
        this->msgs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->msgs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->msgs().begin();
          it != this->msgs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CosmosTxInput_MsgsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(msgs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CosmosTxInput_MsgsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->msgs().begin();
          it != this->msgs().end(); ++it) {
        entry.reset(msgs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional uint64 sequence = 6;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sequence(), target);
  }

  // optional string path = 7;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->path(), target);
  }

  // optional string payment_dis = 8;
  if (this->payment_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payment_dis().data(), this->payment_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.payment_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->payment_dis(), target);
  }

  // optional string to_dis = 9;
  if (this->to_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_dis().data(), this->to_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.to_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->to_dis(), target);
  }

  // optional string from_dis = 10;
  if (this->from_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_dis().data(), this->from_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.from_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->from_dis(), target);
  }

  // optional string fee_dis = 11;
  if (this->fee_dis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee_dis().data(), this->fee_dis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxInput.fee_dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->fee_dis(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.CosmosTxInput)
  return target;
}

size_t CosmosTxInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.CosmosTxInput)
  size_t total_size = 0;

  // optional uint64 account_number = 1;
  if (this->account_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->account_number());
  }

  // optional string chain_id = 2;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // optional .cosmosapi.StdFee fee = 3;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fee_);
  }

  // optional string memo = 4;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memo());
  }

  // optional uint64 sequence = 6;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence());
  }

  // optional string path = 7;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string payment_dis = 8;
  if (this->payment_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payment_dis());
  }

  // optional string to_dis = 9;
  if (this->to_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_dis());
  }

  // optional string from_dis = 10;
  if (this->from_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_dis());
  }

  // optional string fee_dis = 11;
  if (this->fee_dis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fee_dis());
  }

  // map<string, .google.protobuf.Any> msgs = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msgs_size());
  {
    ::google::protobuf::scoped_ptr<CosmosTxInput_MsgsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
        it = this->msgs().begin();
        it != this->msgs().end(); ++it) {
      entry.reset(msgs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmosTxInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.CosmosTxInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CosmosTxInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmosTxInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.CosmosTxInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.CosmosTxInput)
    UnsafeMergeFrom(*source);
  }
}

void CosmosTxInput::MergeFrom(const CosmosTxInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.CosmosTxInput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CosmosTxInput::UnsafeMergeFrom(const CosmosTxInput& from) {
  GOOGLE_DCHECK(&from != this);
  msgs_.MergeFrom(from.msgs_);
  if (from.account_number() != 0) {
    set_account_number(from.account_number());
  }
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.has_fee()) {
    mutable_fee()->::cosmosapi::StdFee::MergeFrom(from.fee());
  }
  if (from.memo().size() > 0) {

    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.payment_dis().size() > 0) {

    payment_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payment_dis_);
  }
  if (from.to_dis().size() > 0) {

    to_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_dis_);
  }
  if (from.from_dis().size() > 0) {

    from_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_dis_);
  }
  if (from.fee_dis().size() > 0) {

    fee_dis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_dis_);
  }
}

void CosmosTxInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.CosmosTxInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmosTxInput::CopyFrom(const CosmosTxInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.CosmosTxInput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CosmosTxInput::IsInitialized() const {

  return true;
}

void CosmosTxInput::Swap(CosmosTxInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmosTxInput::InternalSwap(CosmosTxInput* other) {
  std::swap(account_number_, other->account_number_);
  chain_id_.Swap(&other->chain_id_);
  std::swap(fee_, other->fee_);
  memo_.Swap(&other->memo_);
  msgs_.Swap(&other->msgs_);
  std::swap(sequence_, other->sequence_);
  path_.Swap(&other->path_);
  payment_dis_.Swap(&other->payment_dis_);
  to_dis_.Swap(&other->to_dis_);
  from_dis_.Swap(&other->from_dis_);
  fee_dis_.Swap(&other->fee_dis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmosTxInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CosmosTxInput_descriptor_;
  metadata.reflection = CosmosTxInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmosTxInput

// optional uint64 account_number = 1;
void CosmosTxInput::clear_account_number() {
  account_number_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CosmosTxInput::account_number() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.account_number)
  return account_number_;
}
void CosmosTxInput::set_account_number(::google::protobuf::uint64 value) {
  
  account_number_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.account_number)
}

// optional string chain_id = 2;
void CosmosTxInput::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxInput::chain_id() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.chain_id)
}
void CosmosTxInput::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.chain_id)
}
void CosmosTxInput::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.chain_id)
}
::std::string* CosmosTxInput::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxInput::release_chain_id() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.chain_id)
}

// optional .cosmosapi.StdFee fee = 3;
bool CosmosTxInput::has_fee() const {
  return this != internal_default_instance() && fee_ != NULL;
}
void CosmosTxInput::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
const ::cosmosapi::StdFee& CosmosTxInput::fee() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.fee)
  return fee_ != NULL ? *fee_
                         : *::cosmosapi::StdFee::internal_default_instance();
}
::cosmosapi::StdFee* CosmosTxInput::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::cosmosapi::StdFee;
  }
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.fee)
  return fee_;
}
::cosmosapi::StdFee* CosmosTxInput::release_fee() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.fee)
  
  ::cosmosapi::StdFee* temp = fee_;
  fee_ = NULL;
  return temp;
}
void CosmosTxInput::set_allocated_fee(::cosmosapi::StdFee* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.fee)
}

// optional string memo = 4;
void CosmosTxInput::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxInput::memo() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.memo)
  return memo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_memo(const ::std::string& value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.memo)
}
void CosmosTxInput::set_memo(const char* value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.memo)
}
void CosmosTxInput::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.memo)
}
::std::string* CosmosTxInput::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxInput::release_memo() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.memo)
  
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.memo)
}

// map<string, .google.protobuf.Any> msgs = 5;
int CosmosTxInput::msgs_size() const {
  return msgs_.size();
}
void CosmosTxInput::clear_msgs() {
  msgs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
CosmosTxInput::msgs() const {
  // @@protoc_insertion_point(field_map:cosmosapi.CosmosTxInput.msgs)
  return msgs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
CosmosTxInput::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_map:cosmosapi.CosmosTxInput.msgs)
  return msgs_.MutableMap();
}

// optional uint64 sequence = 6;
void CosmosTxInput::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CosmosTxInput::sequence() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.sequence)
  return sequence_;
}
void CosmosTxInput::set_sequence(::google::protobuf::uint64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.sequence)
}

// optional string path = 7;
void CosmosTxInput::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxInput::path() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.path)
}
void CosmosTxInput::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.path)
}
void CosmosTxInput::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.path)
}
::std::string* CosmosTxInput::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxInput::release_path() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.path)
}

// optional string payment_dis = 8;
void CosmosTxInput::clear_payment_dis() {
  payment_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxInput::payment_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.payment_dis)
  return payment_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_payment_dis(const ::std::string& value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.payment_dis)
}
void CosmosTxInput::set_payment_dis(const char* value) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.payment_dis)
}
void CosmosTxInput::set_payment_dis(const char* value, size_t size) {
  
  payment_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.payment_dis)
}
::std::string* CosmosTxInput::mutable_payment_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.payment_dis)
  return payment_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxInput::release_payment_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.payment_dis)
  
  return payment_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_allocated_payment_dis(::std::string* payment_dis) {
  if (payment_dis != NULL) {
    
  } else {
    
  }
  payment_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.payment_dis)
}

// optional string to_dis = 9;
void CosmosTxInput::clear_to_dis() {
  to_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxInput::to_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.to_dis)
  return to_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_to_dis(const ::std::string& value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.to_dis)
}
void CosmosTxInput::set_to_dis(const char* value) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.to_dis)
}
void CosmosTxInput::set_to_dis(const char* value, size_t size) {
  
  to_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.to_dis)
}
::std::string* CosmosTxInput::mutable_to_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.to_dis)
  return to_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxInput::release_to_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.to_dis)
  
  return to_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_allocated_to_dis(::std::string* to_dis) {
  if (to_dis != NULL) {
    
  } else {
    
  }
  to_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.to_dis)
}

// optional string from_dis = 10;
void CosmosTxInput::clear_from_dis() {
  from_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxInput::from_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.from_dis)
  return from_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_from_dis(const ::std::string& value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.from_dis)
}
void CosmosTxInput::set_from_dis(const char* value) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.from_dis)
}
void CosmosTxInput::set_from_dis(const char* value, size_t size) {
  
  from_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.from_dis)
}
::std::string* CosmosTxInput::mutable_from_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.from_dis)
  return from_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxInput::release_from_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.from_dis)
  
  return from_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_allocated_from_dis(::std::string* from_dis) {
  if (from_dis != NULL) {
    
  } else {
    
  }
  from_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.from_dis)
}

// optional string fee_dis = 11;
void CosmosTxInput::clear_fee_dis() {
  fee_dis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxInput::fee_dis() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxInput.fee_dis)
  return fee_dis_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_fee_dis(const ::std::string& value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxInput.fee_dis)
}
void CosmosTxInput::set_fee_dis(const char* value) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxInput.fee_dis)
}
void CosmosTxInput::set_fee_dis(const char* value, size_t size) {
  
  fee_dis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxInput.fee_dis)
}
::std::string* CosmosTxInput::mutable_fee_dis() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxInput.fee_dis)
  return fee_dis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxInput::release_fee_dis() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxInput.fee_dis)
  
  return fee_dis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxInput::set_allocated_fee_dis(::std::string* fee_dis) {
  if (fee_dis != NULL) {
    
  } else {
    
  }
  fee_dis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee_dis);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxInput.fee_dis)
}

inline const CosmosTxInput* CosmosTxInput::internal_default_instance() {
  return &CosmosTxInput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmosTxOutput::kSignatureFieldNumber;
const int CosmosTxOutput::kTxHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmosTxOutput::CosmosTxOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cosmos_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmosapi.CosmosTxOutput)
}

void CosmosTxOutput::InitAsDefaultInstance() {
}

CosmosTxOutput::CosmosTxOutput(const CosmosTxOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cosmosapi.CosmosTxOutput)
}

void CosmosTxOutput::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CosmosTxOutput::~CosmosTxOutput() {
  // @@protoc_insertion_point(destructor:cosmosapi.CosmosTxOutput)
  SharedDtor();
}

void CosmosTxOutput::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosmosTxOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmosTxOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CosmosTxOutput_descriptor_;
}

const CosmosTxOutput& CosmosTxOutput::default_instance() {
  protobuf_InitDefaults_cosmos_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CosmosTxOutput> CosmosTxOutput_default_instance_;

CosmosTxOutput* CosmosTxOutput::New(::google::protobuf::Arena* arena) const {
  CosmosTxOutput* n = new CosmosTxOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmosTxOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmosapi.CosmosTxOutput)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CosmosTxOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmosapi.CosmosTxOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxOutput.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txHash;
        break;
      }

      // optional string txHash = 2;
      case 2: {
        if (tag == 18) {
         parse_txHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), this->txhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmosapi.CosmosTxOutput.txHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmosapi.CosmosTxOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmosapi.CosmosTxOutput)
  return false;
#undef DO_
}

void CosmosTxOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmosapi.CosmosTxOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxOutput.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // optional string txHash = 2;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxOutput.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txhash(), output);
  }

  // @@protoc_insertion_point(serialize_end:cosmosapi.CosmosTxOutput)
}

::google::protobuf::uint8* CosmosTxOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmosapi.CosmosTxOutput)
  // optional string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxOutput.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // optional string txHash = 2;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), this->txhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmosapi.CosmosTxOutput.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txhash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cosmosapi.CosmosTxOutput)
  return target;
}

size_t CosmosTxOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmosapi.CosmosTxOutput)
  size_t total_size = 0;

  // optional string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // optional string txHash = 2;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmosTxOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmosapi.CosmosTxOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CosmosTxOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmosTxOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmosapi.CosmosTxOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmosapi.CosmosTxOutput)
    UnsafeMergeFrom(*source);
  }
}

void CosmosTxOutput::MergeFrom(const CosmosTxOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmosapi.CosmosTxOutput)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CosmosTxOutput::UnsafeMergeFrom(const CosmosTxOutput& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
}

void CosmosTxOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmosapi.CosmosTxOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmosTxOutput::CopyFrom(const CosmosTxOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmosapi.CosmosTxOutput)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CosmosTxOutput::IsInitialized() const {

  return true;
}

void CosmosTxOutput::Swap(CosmosTxOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmosTxOutput::InternalSwap(CosmosTxOutput* other) {
  signature_.Swap(&other->signature_);
  txhash_.Swap(&other->txhash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmosTxOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CosmosTxOutput_descriptor_;
  metadata.reflection = CosmosTxOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmosTxOutput

// optional string signature = 1;
void CosmosTxOutput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxOutput::signature() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxOutput.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxOutput::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxOutput.signature)
}
void CosmosTxOutput::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxOutput.signature)
}
void CosmosTxOutput::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxOutput.signature)
}
::std::string* CosmosTxOutput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxOutput.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxOutput::release_signature() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxOutput.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxOutput::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxOutput.signature)
}

// optional string txHash = 2;
void CosmosTxOutput::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmosTxOutput::txhash() const {
  // @@protoc_insertion_point(field_get:cosmosapi.CosmosTxOutput.txHash)
  return txhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxOutput::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmosapi.CosmosTxOutput.txHash)
}
void CosmosTxOutput::set_txhash(const char* value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmosapi.CosmosTxOutput.txHash)
}
void CosmosTxOutput::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmosapi.CosmosTxOutput.txHash)
}
::std::string* CosmosTxOutput::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:cosmosapi.CosmosTxOutput.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmosTxOutput::release_txhash() {
  // @@protoc_insertion_point(field_release:cosmosapi.CosmosTxOutput.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmosTxOutput::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:cosmosapi.CosmosTxOutput.txHash)
}

inline const CosmosTxOutput* CosmosTxOutput::internal_default_instance() {
  return &CosmosTxOutput_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cosmosapi

// @@protoc_insertion_point(global_scope)
