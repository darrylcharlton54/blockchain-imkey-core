// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef PROTOBUF_device_2eproto__INCLUDED
#define PROTOBUF_device_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace deviceapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_device_2eproto();
void protobuf_InitDefaults_device_2eproto();
void protobuf_AssignDesc_device_2eproto();
void protobuf_ShutdownFile_device_2eproto();

class ApduResponse;
class AppAction;
class AuthCode;
class AuthCodeResponse;
class AuthCodeServiceResponse;
class AvailableAppBean;
class BindAcquire;
class BindAcquireResponse;
class BindCheck;
class BindDisplay;
class BindDisplayResponse;
class BleAction;
class CheckUpdateResponse;
class DeviceCert;
class DeviceName;
class EmptyResponse;
class GetSnResponse;
class SdkInfoResponse;
class SeAction;
class SeQueryResponse;
class SeQueryServiceResponse;
class Test;

// ===================================================================

class EmptyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyResponse& default_instance();

  static const EmptyResponse* internal_default_instance();

  void Swap(EmptyResponse* other);

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const { return New(NULL); }

  EmptyResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmptyResponse* other);
  void UnsafeMergeFrom(const EmptyResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:deviceapi.EmptyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EmptyResponse> EmptyResponse_default_instance_;

// -------------------------------------------------------------------

class AppAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.AppAction) */ {
 public:
  AppAction();
  virtual ~AppAction();

  AppAction(const AppAction& from);

  inline AppAction& operator=(const AppAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppAction& default_instance();

  static const AppAction* internal_default_instance();

  void Swap(AppAction* other);

  // implements Message ----------------------------------------------

  inline AppAction* New() const { return New(NULL); }

  AppAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppAction& from);
  void MergeFrom(const AppAction& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppAction* other);
  void UnsafeMergeFrom(const AppAction& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_name = 1;
  void clear_app_name();
  static const int kAppNameFieldNumber = 1;
  const ::std::string& app_name() const;
  void set_app_name(const ::std::string& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  ::std::string* mutable_app_name();
  ::std::string* release_app_name();
  void set_allocated_app_name(::std::string* app_name);

  // @@protoc_insertion_point(class_scope:deviceapi.AppAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr app_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AppAction> AppAction_default_instance_;

// -------------------------------------------------------------------

class DeviceCert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.DeviceCert) */ {
 public:
  DeviceCert();
  virtual ~DeviceCert();

  DeviceCert(const DeviceCert& from);

  inline DeviceCert& operator=(const DeviceCert& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceCert& default_instance();

  static const DeviceCert* internal_default_instance();

  void Swap(DeviceCert* other);

  // implements Message ----------------------------------------------

  inline DeviceCert* New() const { return New(NULL); }

  DeviceCert* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceCert& from);
  void MergeFrom(const DeviceCert& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceCert* other);
  void UnsafeMergeFrom(const DeviceCert& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string se_id = 1;
  void clear_se_id();
  static const int kSeIdFieldNumber = 1;
  const ::std::string& se_id() const;
  void set_se_id(const ::std::string& value);
  void set_se_id(const char* value);
  void set_se_id(const char* value, size_t size);
  ::std::string* mutable_se_id();
  ::std::string* release_se_id();
  void set_allocated_se_id(::std::string* se_id);

  // optional string sn = 2;
  void clear_sn();
  static const int kSnFieldNumber = 2;
  const ::std::string& sn() const;
  void set_sn(const ::std::string& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  ::std::string* mutable_sn();
  ::std::string* release_sn();
  void set_allocated_sn(::std::string* sn);

  // optional string device_cert = 3;
  void clear_device_cert();
  static const int kDeviceCertFieldNumber = 3;
  const ::std::string& device_cert() const;
  void set_device_cert(const ::std::string& value);
  void set_device_cert(const char* value);
  void set_device_cert(const char* value, size_t size);
  ::std::string* mutable_device_cert();
  ::std::string* release_device_cert();
  void set_allocated_device_cert(::std::string* device_cert);

  // @@protoc_insertion_point(class_scope:deviceapi.DeviceCert)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr se_id_;
  ::google::protobuf::internal::ArenaStringPtr sn_;
  ::google::protobuf::internal::ArenaStringPtr device_cert_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeviceCert> DeviceCert_default_instance_;

// -------------------------------------------------------------------

class AuthCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.AuthCode) */ {
 public:
  AuthCode();
  virtual ~AuthCode();

  AuthCode(const AuthCode& from);

  inline AuthCode& operator=(const AuthCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthCode& default_instance();

  static const AuthCode* internal_default_instance();

  void Swap(AuthCode* other);

  // implements Message ----------------------------------------------

  inline AuthCode* New() const { return New(NULL); }

  AuthCode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthCode& from);
  void MergeFrom(const AuthCode& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthCode* other);
  void UnsafeMergeFrom(const AuthCode& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string se_id = 1;
  void clear_se_id();
  static const int kSeIdFieldNumber = 1;
  const ::std::string& se_id() const;
  void set_se_id(const ::std::string& value);
  void set_se_id(const char* value);
  void set_se_id(const char* value, size_t size);
  ::std::string* mutable_se_id();
  ::std::string* release_se_id();
  void set_allocated_se_id(::std::string* se_id);

  // optional string auth_code = 2;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 2;
  const ::std::string& auth_code() const;
  void set_auth_code(const ::std::string& value);
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  ::std::string* mutable_auth_code();
  ::std::string* release_auth_code();
  void set_allocated_auth_code(::std::string* auth_code);

  // @@protoc_insertion_point(class_scope:deviceapi.AuthCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr se_id_;
  ::google::protobuf::internal::ArenaStringPtr auth_code_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthCode> AuthCode_default_instance_;

// -------------------------------------------------------------------

class AuthCodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.AuthCodeResponse) */ {
 public:
  AuthCodeResponse();
  virtual ~AuthCodeResponse();

  AuthCodeResponse(const AuthCodeResponse& from);

  inline AuthCodeResponse& operator=(const AuthCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthCodeResponse& default_instance();

  static const AuthCodeResponse* internal_default_instance();

  void Swap(AuthCodeResponse* other);

  // implements Message ----------------------------------------------

  inline AuthCodeResponse* New() const { return New(NULL); }

  AuthCodeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthCodeResponse& from);
  void MergeFrom(const AuthCodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthCodeResponse* other);
  void UnsafeMergeFrom(const AuthCodeResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string se_id = 1;
  void clear_se_id();
  static const int kSeIdFieldNumber = 1;
  const ::std::string& se_id() const;
  void set_se_id(const ::std::string& value);
  void set_se_id(const char* value);
  void set_se_id(const char* value, size_t size);
  ::std::string* mutable_se_id();
  ::std::string* release_se_id();
  void set_allocated_se_id(::std::string* se_id);

  // optional string next_stepkey = 2;
  void clear_next_stepkey();
  static const int kNextStepkeyFieldNumber = 2;
  const ::std::string& next_stepkey() const;
  void set_next_stepkey(const ::std::string& value);
  void set_next_stepkey(const char* value);
  void set_next_stepkey(const char* value, size_t size);
  ::std::string* mutable_next_stepkey();
  ::std::string* release_next_stepkey();
  void set_allocated_next_stepkey(::std::string* next_stepkey);

  // repeated string apdu_list = 3;
  int apdu_list_size() const;
  void clear_apdu_list();
  static const int kApduListFieldNumber = 3;
  const ::std::string& apdu_list(int index) const;
  ::std::string* mutable_apdu_list(int index);
  void set_apdu_list(int index, const ::std::string& value);
  void set_apdu_list(int index, const char* value);
  void set_apdu_list(int index, const char* value, size_t size);
  ::std::string* add_apdu_list();
  void add_apdu_list(const ::std::string& value);
  void add_apdu_list(const char* value);
  void add_apdu_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& apdu_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_apdu_list();

  // @@protoc_insertion_point(class_scope:deviceapi.AuthCodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> apdu_list_;
  ::google::protobuf::internal::ArenaStringPtr se_id_;
  ::google::protobuf::internal::ArenaStringPtr next_stepkey_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthCodeResponse> AuthCodeResponse_default_instance_;

// -------------------------------------------------------------------

class AuthCodeServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.AuthCodeServiceResponse) */ {
 public:
  AuthCodeServiceResponse();
  virtual ~AuthCodeServiceResponse();

  AuthCodeServiceResponse(const AuthCodeServiceResponse& from);

  inline AuthCodeServiceResponse& operator=(const AuthCodeServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthCodeServiceResponse& default_instance();

  static const AuthCodeServiceResponse* internal_default_instance();

  void Swap(AuthCodeServiceResponse* other);

  // implements Message ----------------------------------------------

  inline AuthCodeServiceResponse* New() const { return New(NULL); }

  AuthCodeServiceResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthCodeServiceResponse& from);
  void MergeFrom(const AuthCodeServiceResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthCodeServiceResponse* other);
  void UnsafeMergeFrom(const AuthCodeServiceResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string return_code = 1;
  void clear_return_code();
  static const int kReturnCodeFieldNumber = 1;
  const ::std::string& return_code() const;
  void set_return_code(const ::std::string& value);
  void set_return_code(const char* value);
  void set_return_code(const char* value, size_t size);
  ::std::string* mutable_return_code();
  ::std::string* release_return_code();
  void set_allocated_return_code(::std::string* return_code);

  // optional string return_msg = 2;
  void clear_return_msg();
  static const int kReturnMsgFieldNumber = 2;
  const ::std::string& return_msg() const;
  void set_return_msg(const ::std::string& value);
  void set_return_msg(const char* value);
  void set_return_msg(const char* value, size_t size);
  ::std::string* mutable_return_msg();
  ::std::string* release_return_msg();
  void set_allocated_return_msg(::std::string* return_msg);

  // optional .deviceapi.AuthCodeResponse return_data = 3;
  bool has_return_data() const;
  void clear_return_data();
  static const int kReturnDataFieldNumber = 3;
  const ::deviceapi::AuthCodeResponse& return_data() const;
  ::deviceapi::AuthCodeResponse* mutable_return_data();
  ::deviceapi::AuthCodeResponse* release_return_data();
  void set_allocated_return_data(::deviceapi::AuthCodeResponse* return_data);

  // @@protoc_insertion_point(class_scope:deviceapi.AuthCodeServiceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr return_code_;
  ::google::protobuf::internal::ArenaStringPtr return_msg_;
  ::deviceapi::AuthCodeResponse* return_data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthCodeServiceResponse> AuthCodeServiceResponse_default_instance_;

// -------------------------------------------------------------------

class SeAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.SeAction) */ {
 public:
  SeAction();
  virtual ~SeAction();

  SeAction(const SeAction& from);

  inline SeAction& operator=(const SeAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeAction& default_instance();

  static const SeAction* internal_default_instance();

  void Swap(SeAction* other);

  // implements Message ----------------------------------------------

  inline SeAction* New() const { return New(NULL); }

  SeAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeAction& from);
  void MergeFrom(const SeAction& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeAction* other);
  void UnsafeMergeFrom(const SeAction& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string se_id = 1;
  void clear_se_id();
  static const int kSeIdFieldNumber = 1;
  const ::std::string& se_id() const;
  void set_se_id(const ::std::string& value);
  void set_se_id(const char* value);
  void set_se_id(const char* value, size_t size);
  ::std::string* mutable_se_id();
  ::std::string* release_se_id();
  void set_allocated_se_id(::std::string* se_id);

  // optional string sn = 2;
  void clear_sn();
  static const int kSnFieldNumber = 2;
  const ::std::string& sn() const;
  void set_sn(const ::std::string& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  ::std::string* mutable_sn();
  ::std::string* release_sn();
  void set_allocated_sn(::std::string* sn);

  // optional string device_cert = 3;
  void clear_device_cert();
  static const int kDeviceCertFieldNumber = 3;
  const ::std::string& device_cert() const;
  void set_device_cert(const ::std::string& value);
  void set_device_cert(const char* value);
  void set_device_cert(const char* value, size_t size);
  ::std::string* mutable_device_cert();
  ::std::string* release_device_cert();
  void set_allocated_device_cert(::std::string* device_cert);

  // optional string sdk_version = 4;
  void clear_sdk_version();
  static const int kSdkVersionFieldNumber = 4;
  const ::std::string& sdk_version() const;
  void set_sdk_version(const ::std::string& value);
  void set_sdk_version(const char* value);
  void set_sdk_version(const char* value, size_t size);
  ::std::string* mutable_sdk_version();
  ::std::string* release_sdk_version();
  void set_allocated_sdk_version(::std::string* sdk_version);

  // @@protoc_insertion_point(class_scope:deviceapi.SeAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr se_id_;
  ::google::protobuf::internal::ArenaStringPtr sn_;
  ::google::protobuf::internal::ArenaStringPtr device_cert_;
  ::google::protobuf::internal::ArenaStringPtr sdk_version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SeAction> SeAction_default_instance_;

// -------------------------------------------------------------------

class SeQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.SeQueryResponse) */ {
 public:
  SeQueryResponse();
  virtual ~SeQueryResponse();

  SeQueryResponse(const SeQueryResponse& from);

  inline SeQueryResponse& operator=(const SeQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeQueryResponse& default_instance();

  static const SeQueryResponse* internal_default_instance();

  void Swap(SeQueryResponse* other);

  // implements Message ----------------------------------------------

  inline SeQueryResponse* New() const { return New(NULL); }

  SeQueryResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeQueryResponse& from);
  void MergeFrom(const SeQueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeQueryResponse* other);
  void UnsafeMergeFrom(const SeQueryResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string se_id = 1;
  void clear_se_id();
  static const int kSeIdFieldNumber = 1;
  const ::std::string& se_id() const;
  void set_se_id(const ::std::string& value);
  void set_se_id(const char* value);
  void set_se_id(const char* value, size_t size);
  ::std::string* mutable_se_id();
  ::std::string* release_se_id();
  void set_allocated_se_id(::std::string* se_id);

  // optional string next_stepkey = 2;
  void clear_next_stepkey();
  static const int kNextStepkeyFieldNumber = 2;
  const ::std::string& next_stepkey() const;
  void set_next_stepkey(const ::std::string& value);
  void set_next_stepkey(const char* value);
  void set_next_stepkey(const char* value, size_t size);
  ::std::string* mutable_next_stepkey();
  ::std::string* release_next_stepkey();
  void set_allocated_next_stepkey(::std::string* next_stepkey);

  // optional string sn = 3;
  void clear_sn();
  static const int kSnFieldNumber = 3;
  const ::std::string& sn() const;
  void set_sn(const ::std::string& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  ::std::string* mutable_sn();
  ::std::string* release_sn();
  void set_allocated_sn(::std::string* sn);

  // optional string sdk_mode = 4;
  void clear_sdk_mode();
  static const int kSdkModeFieldNumber = 4;
  const ::std::string& sdk_mode() const;
  void set_sdk_mode(const ::std::string& value);
  void set_sdk_mode(const char* value);
  void set_sdk_mode(const char* value, size_t size);
  ::std::string* mutable_sdk_mode();
  ::std::string* release_sdk_mode();
  void set_allocated_sdk_mode(::std::string* sdk_mode);

  // repeated .deviceapi.AvailableAppBean available_app_bean_list = 5;
  int available_app_bean_list_size() const;
  void clear_available_app_bean_list();
  static const int kAvailableAppBeanListFieldNumber = 5;
  const ::deviceapi::AvailableAppBean& available_app_bean_list(int index) const;
  ::deviceapi::AvailableAppBean* mutable_available_app_bean_list(int index);
  ::deviceapi::AvailableAppBean* add_available_app_bean_list();
  ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >*
      mutable_available_app_bean_list();
  const ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >&
      available_app_bean_list() const;

  // @@protoc_insertion_point(class_scope:deviceapi.SeQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean > available_app_bean_list_;
  ::google::protobuf::internal::ArenaStringPtr se_id_;
  ::google::protobuf::internal::ArenaStringPtr next_stepkey_;
  ::google::protobuf::internal::ArenaStringPtr sn_;
  ::google::protobuf::internal::ArenaStringPtr sdk_mode_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SeQueryResponse> SeQueryResponse_default_instance_;

// -------------------------------------------------------------------

class SeQueryServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.SeQueryServiceResponse) */ {
 public:
  SeQueryServiceResponse();
  virtual ~SeQueryServiceResponse();

  SeQueryServiceResponse(const SeQueryServiceResponse& from);

  inline SeQueryServiceResponse& operator=(const SeQueryServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeQueryServiceResponse& default_instance();

  static const SeQueryServiceResponse* internal_default_instance();

  void Swap(SeQueryServiceResponse* other);

  // implements Message ----------------------------------------------

  inline SeQueryServiceResponse* New() const { return New(NULL); }

  SeQueryServiceResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeQueryServiceResponse& from);
  void MergeFrom(const SeQueryServiceResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeQueryServiceResponse* other);
  void UnsafeMergeFrom(const SeQueryServiceResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string return_code = 1;
  void clear_return_code();
  static const int kReturnCodeFieldNumber = 1;
  const ::std::string& return_code() const;
  void set_return_code(const ::std::string& value);
  void set_return_code(const char* value);
  void set_return_code(const char* value, size_t size);
  ::std::string* mutable_return_code();
  ::std::string* release_return_code();
  void set_allocated_return_code(::std::string* return_code);

  // optional string return_msg = 2;
  void clear_return_msg();
  static const int kReturnMsgFieldNumber = 2;
  const ::std::string& return_msg() const;
  void set_return_msg(const ::std::string& value);
  void set_return_msg(const char* value);
  void set_return_msg(const char* value, size_t size);
  ::std::string* mutable_return_msg();
  ::std::string* release_return_msg();
  void set_allocated_return_msg(::std::string* return_msg);

  // optional .deviceapi.SeQueryResponse return_data = 3;
  bool has_return_data() const;
  void clear_return_data();
  static const int kReturnDataFieldNumber = 3;
  const ::deviceapi::SeQueryResponse& return_data() const;
  ::deviceapi::SeQueryResponse* mutable_return_data();
  ::deviceapi::SeQueryResponse* release_return_data();
  void set_allocated_return_data(::deviceapi::SeQueryResponse* return_data);

  // @@protoc_insertion_point(class_scope:deviceapi.SeQueryServiceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr return_code_;
  ::google::protobuf::internal::ArenaStringPtr return_msg_;
  ::deviceapi::SeQueryResponse* return_data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SeQueryServiceResponse> SeQueryServiceResponse_default_instance_;

// -------------------------------------------------------------------

class BindCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.BindCheck) */ {
 public:
  BindCheck();
  virtual ~BindCheck();

  BindCheck(const BindCheck& from);

  inline BindCheck& operator=(const BindCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindCheck& default_instance();

  static const BindCheck* internal_default_instance();

  void Swap(BindCheck* other);

  // implements Message ----------------------------------------------

  inline BindCheck* New() const { return New(NULL); }

  BindCheck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindCheck& from);
  void MergeFrom(const BindCheck& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindCheck* other);
  void UnsafeMergeFrom(const BindCheck& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_path = 1;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:deviceapi.BindCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BindCheck> BindCheck_default_instance_;

// -------------------------------------------------------------------

class BindAcquire : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.BindAcquire) */ {
 public:
  BindAcquire();
  virtual ~BindAcquire();

  BindAcquire(const BindAcquire& from);

  inline BindAcquire& operator=(const BindAcquire& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindAcquire& default_instance();

  static const BindAcquire* internal_default_instance();

  void Swap(BindAcquire* other);

  // implements Message ----------------------------------------------

  inline BindAcquire* New() const { return New(NULL); }

  BindAcquire* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindAcquire& from);
  void MergeFrom(const BindAcquire& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindAcquire* other);
  void UnsafeMergeFrom(const BindAcquire& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bind_code = 1;
  void clear_bind_code();
  static const int kBindCodeFieldNumber = 1;
  const ::std::string& bind_code() const;
  void set_bind_code(const ::std::string& value);
  void set_bind_code(const char* value);
  void set_bind_code(const char* value, size_t size);
  ::std::string* mutable_bind_code();
  ::std::string* release_bind_code();
  void set_allocated_bind_code(::std::string* bind_code);

  // @@protoc_insertion_point(class_scope:deviceapi.BindAcquire)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bind_code_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BindAcquire> BindAcquire_default_instance_;

// -------------------------------------------------------------------

class BindAcquireResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.BindAcquireResponse) */ {
 public:
  BindAcquireResponse();
  virtual ~BindAcquireResponse();

  BindAcquireResponse(const BindAcquireResponse& from);

  inline BindAcquireResponse& operator=(const BindAcquireResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindAcquireResponse& default_instance();

  static const BindAcquireResponse* internal_default_instance();

  void Swap(BindAcquireResponse* other);

  // implements Message ----------------------------------------------

  inline BindAcquireResponse* New() const { return New(NULL); }

  BindAcquireResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindAcquireResponse& from);
  void MergeFrom(const BindAcquireResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindAcquireResponse* other);
  void UnsafeMergeFrom(const BindAcquireResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bind_result = 1;
  void clear_bind_result();
  static const int kBindResultFieldNumber = 1;
  const ::std::string& bind_result() const;
  void set_bind_result(const ::std::string& value);
  void set_bind_result(const char* value);
  void set_bind_result(const char* value, size_t size);
  ::std::string* mutable_bind_result();
  ::std::string* release_bind_result();
  void set_allocated_bind_result(::std::string* bind_result);

  // @@protoc_insertion_point(class_scope:deviceapi.BindAcquireResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bind_result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BindAcquireResponse> BindAcquireResponse_default_instance_;

// -------------------------------------------------------------------

class BindDisplay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.BindDisplay) */ {
 public:
  BindDisplay();
  virtual ~BindDisplay();

  BindDisplay(const BindDisplay& from);

  inline BindDisplay& operator=(const BindDisplay& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindDisplay& default_instance();

  static const BindDisplay* internal_default_instance();

  void Swap(BindDisplay* other);

  // implements Message ----------------------------------------------

  inline BindDisplay* New() const { return New(NULL); }

  BindDisplay* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindDisplay& from);
  void MergeFrom(const BindDisplay& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindDisplay* other);
  void UnsafeMergeFrom(const BindDisplay& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:deviceapi.BindDisplay)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BindDisplay> BindDisplay_default_instance_;

// -------------------------------------------------------------------

class BindDisplayResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.BindDisplayResponse) */ {
 public:
  BindDisplayResponse();
  virtual ~BindDisplayResponse();

  BindDisplayResponse(const BindDisplayResponse& from);

  inline BindDisplayResponse& operator=(const BindDisplayResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindDisplayResponse& default_instance();

  static const BindDisplayResponse* internal_default_instance();

  void Swap(BindDisplayResponse* other);

  // implements Message ----------------------------------------------

  inline BindDisplayResponse* New() const { return New(NULL); }

  BindDisplayResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindDisplayResponse& from);
  void MergeFrom(const BindDisplayResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindDisplayResponse* other);
  void UnsafeMergeFrom(const BindDisplayResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bind_display_result = 1;
  void clear_bind_display_result();
  static const int kBindDisplayResultFieldNumber = 1;
  const ::std::string& bind_display_result() const;
  void set_bind_display_result(const ::std::string& value);
  void set_bind_display_result(const char* value);
  void set_bind_display_result(const char* value, size_t size);
  ::std::string* mutable_bind_display_result();
  ::std::string* release_bind_display_result();
  void set_allocated_bind_display_result(::std::string* bind_display_result);

  // @@protoc_insertion_point(class_scope:deviceapi.BindDisplayResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bind_display_result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BindDisplayResponse> BindDisplayResponse_default_instance_;

// -------------------------------------------------------------------

class DeviceName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.DeviceName) */ {
 public:
  DeviceName();
  virtual ~DeviceName();

  DeviceName(const DeviceName& from);

  inline DeviceName& operator=(const DeviceName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceName& default_instance();

  static const DeviceName* internal_default_instance();

  void Swap(DeviceName* other);

  // implements Message ----------------------------------------------

  inline DeviceName* New() const { return New(NULL); }

  DeviceName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceName& from);
  void MergeFrom(const DeviceName& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceName* other);
  void UnsafeMergeFrom(const DeviceName& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ble_name = 1;
  void clear_ble_name();
  static const int kBleNameFieldNumber = 1;
  const ::std::string& ble_name() const;
  void set_ble_name(const ::std::string& value);
  void set_ble_name(const char* value);
  void set_ble_name(const char* value, size_t size);
  ::std::string* mutable_ble_name();
  ::std::string* release_ble_name();
  void set_allocated_ble_name(::std::string* ble_name);

  // @@protoc_insertion_point(class_scope:deviceapi.DeviceName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ble_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeviceName> DeviceName_default_instance_;

// -------------------------------------------------------------------

class GetSnResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.GetSnResponse) */ {
 public:
  GetSnResponse();
  virtual ~GetSnResponse();

  GetSnResponse(const GetSnResponse& from);

  inline GetSnResponse& operator=(const GetSnResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSnResponse& default_instance();

  static const GetSnResponse* internal_default_instance();

  void Swap(GetSnResponse* other);

  // implements Message ----------------------------------------------

  inline GetSnResponse* New() const { return New(NULL); }

  GetSnResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSnResponse& from);
  void MergeFrom(const GetSnResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSnResponse* other);
  void UnsafeMergeFrom(const GetSnResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sn = 1;
  void clear_sn();
  static const int kSnFieldNumber = 1;
  const ::std::string& sn() const;
  void set_sn(const ::std::string& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  ::std::string* mutable_sn();
  ::std::string* release_sn();
  void set_allocated_sn(::std::string* sn);

  // @@protoc_insertion_point(class_scope:deviceapi.GetSnResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sn_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GetSnResponse> GetSnResponse_default_instance_;

// -------------------------------------------------------------------

class ApduResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.ApduResponse) */ {
 public:
  ApduResponse();
  virtual ~ApduResponse();

  ApduResponse(const ApduResponse& from);

  inline ApduResponse& operator=(const ApduResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApduResponse& default_instance();

  static const ApduResponse* internal_default_instance();

  void Swap(ApduResponse* other);

  // implements Message ----------------------------------------------

  inline ApduResponse* New() const { return New(NULL); }

  ApduResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApduResponse& from);
  void MergeFrom(const ApduResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApduResponse* other);
  void UnsafeMergeFrom(const ApduResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:deviceapi.ApduResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ApduResponse> ApduResponse_default_instance_;

// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  static const Test* internal_default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  inline Test* New() const { return New(NULL); }

  Test* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Test* other);
  void UnsafeMergeFrom(const Test& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tt = 1;
  void clear_tt();
  static const int kTtFieldNumber = 1;
  const ::std::string& tt() const;
  void set_tt(const ::std::string& value);
  void set_tt(const char* value);
  void set_tt(const char* value, size_t size);
  ::std::string* mutable_tt();
  ::std::string* release_tt();
  void set_allocated_tt(::std::string* tt);

  // @@protoc_insertion_point(class_scope:deviceapi.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tt_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Test> Test_default_instance_;

// -------------------------------------------------------------------

class CheckUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.CheckUpdateResponse) */ {
 public:
  CheckUpdateResponse();
  virtual ~CheckUpdateResponse();

  CheckUpdateResponse(const CheckUpdateResponse& from);

  inline CheckUpdateResponse& operator=(const CheckUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUpdateResponse& default_instance();

  static const CheckUpdateResponse* internal_default_instance();

  void Swap(CheckUpdateResponse* other);

  // implements Message ----------------------------------------------

  inline CheckUpdateResponse* New() const { return New(NULL); }

  CheckUpdateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckUpdateResponse& from);
  void MergeFrom(const CheckUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckUpdateResponse* other);
  void UnsafeMergeFrom(const CheckUpdateResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string se_id = 1;
  void clear_se_id();
  static const int kSeIdFieldNumber = 1;
  const ::std::string& se_id() const;
  void set_se_id(const ::std::string& value);
  void set_se_id(const char* value);
  void set_se_id(const char* value, size_t size);
  ::std::string* mutable_se_id();
  ::std::string* release_se_id();
  void set_allocated_se_id(::std::string* se_id);

  // optional string sn = 2;
  void clear_sn();
  static const int kSnFieldNumber = 2;
  const ::std::string& sn() const;
  void set_sn(const ::std::string& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  ::std::string* mutable_sn();
  ::std::string* release_sn();
  void set_allocated_sn(::std::string* sn);

  // optional string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string sdk_mode = 4;
  void clear_sdk_mode();
  static const int kSdkModeFieldNumber = 4;
  const ::std::string& sdk_mode() const;
  void set_sdk_mode(const ::std::string& value);
  void set_sdk_mode(const char* value);
  void set_sdk_mode(const char* value, size_t size);
  ::std::string* mutable_sdk_mode();
  ::std::string* release_sdk_mode();
  void set_allocated_sdk_mode(::std::string* sdk_mode);

  // repeated .deviceapi.AvailableAppBean available_app_list = 5;
  int available_app_list_size() const;
  void clear_available_app_list();
  static const int kAvailableAppListFieldNumber = 5;
  const ::deviceapi::AvailableAppBean& available_app_list(int index) const;
  ::deviceapi::AvailableAppBean* mutable_available_app_list(int index);
  ::deviceapi::AvailableAppBean* add_available_app_list();
  ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >*
      mutable_available_app_list();
  const ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >&
      available_app_list() const;

  // @@protoc_insertion_point(class_scope:deviceapi.CheckUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean > available_app_list_;
  ::google::protobuf::internal::ArenaStringPtr se_id_;
  ::google::protobuf::internal::ArenaStringPtr sn_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr sdk_mode_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckUpdateResponse> CheckUpdateResponse_default_instance_;

// -------------------------------------------------------------------

class AvailableAppBean : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.AvailableAppBean) */ {
 public:
  AvailableAppBean();
  virtual ~AvailableAppBean();

  AvailableAppBean(const AvailableAppBean& from);

  inline AvailableAppBean& operator=(const AvailableAppBean& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvailableAppBean& default_instance();

  static const AvailableAppBean* internal_default_instance();

  void Swap(AvailableAppBean* other);

  // implements Message ----------------------------------------------

  inline AvailableAppBean* New() const { return New(NULL); }

  AvailableAppBean* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvailableAppBean& from);
  void MergeFrom(const AvailableAppBean& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AvailableAppBean* other);
  void UnsafeMergeFrom(const AvailableAppBean& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_name = 1;
  void clear_app_name();
  static const int kAppNameFieldNumber = 1;
  const ::std::string& app_name() const;
  void set_app_name(const ::std::string& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  ::std::string* mutable_app_name();
  ::std::string* release_app_name();
  void set_allocated_app_name(::std::string* app_name);

  // optional string app_logo = 2;
  void clear_app_logo();
  static const int kAppLogoFieldNumber = 2;
  const ::std::string& app_logo() const;
  void set_app_logo(const ::std::string& value);
  void set_app_logo(const char* value);
  void set_app_logo(const char* value, size_t size);
  ::std::string* mutable_app_logo();
  ::std::string* release_app_logo();
  void set_allocated_app_logo(::std::string* app_logo);

  // optional string installed_version = 3;
  void clear_installed_version();
  static const int kInstalledVersionFieldNumber = 3;
  const ::std::string& installed_version() const;
  void set_installed_version(const ::std::string& value);
  void set_installed_version(const char* value);
  void set_installed_version(const char* value, size_t size);
  ::std::string* mutable_installed_version();
  ::std::string* release_installed_version();
  void set_allocated_installed_version(::std::string* installed_version);

  // optional string last_updated = 4;
  void clear_last_updated();
  static const int kLastUpdatedFieldNumber = 4;
  const ::std::string& last_updated() const;
  void set_last_updated(const ::std::string& value);
  void set_last_updated(const char* value);
  void set_last_updated(const char* value, size_t size);
  ::std::string* mutable_last_updated();
  ::std::string* release_last_updated();
  void set_allocated_last_updated(::std::string* last_updated);

  // optional string latest_version = 5;
  void clear_latest_version();
  static const int kLatestVersionFieldNumber = 5;
  const ::std::string& latest_version() const;
  void set_latest_version(const ::std::string& value);
  void set_latest_version(const char* value);
  void set_latest_version(const char* value, size_t size);
  ::std::string* mutable_latest_version();
  ::std::string* release_latest_version();
  void set_allocated_latest_version(::std::string* latest_version);

  // optional string install_mode = 6;
  void clear_install_mode();
  static const int kInstallModeFieldNumber = 6;
  const ::std::string& install_mode() const;
  void set_install_mode(const ::std::string& value);
  void set_install_mode(const char* value);
  void set_install_mode(const char* value, size_t size);
  ::std::string* mutable_install_mode();
  ::std::string* release_install_mode();
  void set_allocated_install_mode(::std::string* install_mode);

  // @@protoc_insertion_point(class_scope:deviceapi.AvailableAppBean)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr app_name_;
  ::google::protobuf::internal::ArenaStringPtr app_logo_;
  ::google::protobuf::internal::ArenaStringPtr installed_version_;
  ::google::protobuf::internal::ArenaStringPtr last_updated_;
  ::google::protobuf::internal::ArenaStringPtr latest_version_;
  ::google::protobuf::internal::ArenaStringPtr install_mode_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AvailableAppBean> AvailableAppBean_default_instance_;

// -------------------------------------------------------------------

class SdkInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.SdkInfoResponse) */ {
 public:
  SdkInfoResponse();
  virtual ~SdkInfoResponse();

  SdkInfoResponse(const SdkInfoResponse& from);

  inline SdkInfoResponse& operator=(const SdkInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkInfoResponse& default_instance();

  static const SdkInfoResponse* internal_default_instance();

  void Swap(SdkInfoResponse* other);

  // implements Message ----------------------------------------------

  inline SdkInfoResponse* New() const { return New(NULL); }

  SdkInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkInfoResponse& from);
  void MergeFrom(const SdkInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdkInfoResponse* other);
  void UnsafeMergeFrom(const SdkInfoResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sdk_version = 1;
  void clear_sdk_version();
  static const int kSdkVersionFieldNumber = 1;
  const ::std::string& sdk_version() const;
  void set_sdk_version(const ::std::string& value);
  void set_sdk_version(const char* value);
  void set_sdk_version(const char* value, size_t size);
  ::std::string* mutable_sdk_version();
  ::std::string* release_sdk_version();
  void set_allocated_sdk_version(::std::string* sdk_version);

  // @@protoc_insertion_point(class_scope:deviceapi.SdkInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sdk_version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SdkInfoResponse> SdkInfoResponse_default_instance_;

// -------------------------------------------------------------------

class BleAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:deviceapi.BleAction) */ {
 public:
  BleAction();
  virtual ~BleAction();

  BleAction(const BleAction& from);

  inline BleAction& operator=(const BleAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BleAction& default_instance();

  static const BleAction* internal_default_instance();

  void Swap(BleAction* other);

  // implements Message ----------------------------------------------

  inline BleAction* New() const { return New(NULL); }

  BleAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BleAction& from);
  void MergeFrom(const BleAction& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BleAction* other);
  void UnsafeMergeFrom(const BleAction& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ble_name = 1;
  void clear_ble_name();
  static const int kBleNameFieldNumber = 1;
  const ::std::string& ble_name() const;
  void set_ble_name(const ::std::string& value);
  void set_ble_name(const char* value);
  void set_ble_name(const char* value, size_t size);
  ::std::string* mutable_ble_name();
  ::std::string* release_ble_name();
  void set_allocated_ble_name(::std::string* ble_name);

  // @@protoc_insertion_point(class_scope:deviceapi.BleAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ble_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_device_2eproto_impl();
  friend void  protobuf_AddDesc_device_2eproto_impl();
  friend void protobuf_AssignDesc_device_2eproto();
  friend void protobuf_ShutdownFile_device_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BleAction> BleAction_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyResponse

inline const EmptyResponse* EmptyResponse::internal_default_instance() {
  return &EmptyResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// AppAction

// optional string app_name = 1;
inline void AppAction::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppAction::app_name() const {
  // @@protoc_insertion_point(field_get:deviceapi.AppAction.app_name)
  return app_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppAction::set_app_name(const ::std::string& value) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AppAction.app_name)
}
inline void AppAction::set_app_name(const char* value) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AppAction.app_name)
}
inline void AppAction::set_app_name(const char* value, size_t size) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AppAction.app_name)
}
inline ::std::string* AppAction::mutable_app_name() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AppAction.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppAction::release_app_name() {
  // @@protoc_insertion_point(field_release:deviceapi.AppAction.app_name)
  
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppAction::set_allocated_app_name(::std::string* app_name) {
  if (app_name != NULL) {
    
  } else {
    
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AppAction.app_name)
}

inline const AppAction* AppAction::internal_default_instance() {
  return &AppAction_default_instance_.get();
}
// -------------------------------------------------------------------

// DeviceCert

// optional string se_id = 1;
inline void DeviceCert::clear_se_id() {
  se_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceCert::se_id() const {
  // @@protoc_insertion_point(field_get:deviceapi.DeviceCert.se_id)
  return se_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCert::set_se_id(const ::std::string& value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.DeviceCert.se_id)
}
inline void DeviceCert::set_se_id(const char* value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.DeviceCert.se_id)
}
inline void DeviceCert::set_se_id(const char* value, size_t size) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.DeviceCert.se_id)
}
inline ::std::string* DeviceCert::mutable_se_id() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.DeviceCert.se_id)
  return se_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceCert::release_se_id() {
  // @@protoc_insertion_point(field_release:deviceapi.DeviceCert.se_id)
  
  return se_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCert::set_allocated_se_id(::std::string* se_id) {
  if (se_id != NULL) {
    
  } else {
    
  }
  se_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_id);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.DeviceCert.se_id)
}

// optional string sn = 2;
inline void DeviceCert::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceCert::sn() const {
  // @@protoc_insertion_point(field_get:deviceapi.DeviceCert.sn)
  return sn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCert::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.DeviceCert.sn)
}
inline void DeviceCert::set_sn(const char* value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.DeviceCert.sn)
}
inline void DeviceCert::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.DeviceCert.sn)
}
inline ::std::string* DeviceCert::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.DeviceCert.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceCert::release_sn() {
  // @@protoc_insertion_point(field_release:deviceapi.DeviceCert.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCert::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.DeviceCert.sn)
}

// optional string device_cert = 3;
inline void DeviceCert::clear_device_cert() {
  device_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceCert::device_cert() const {
  // @@protoc_insertion_point(field_get:deviceapi.DeviceCert.device_cert)
  return device_cert_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCert::set_device_cert(const ::std::string& value) {
  
  device_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.DeviceCert.device_cert)
}
inline void DeviceCert::set_device_cert(const char* value) {
  
  device_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.DeviceCert.device_cert)
}
inline void DeviceCert::set_device_cert(const char* value, size_t size) {
  
  device_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.DeviceCert.device_cert)
}
inline ::std::string* DeviceCert::mutable_device_cert() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.DeviceCert.device_cert)
  return device_cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceCert::release_device_cert() {
  // @@protoc_insertion_point(field_release:deviceapi.DeviceCert.device_cert)
  
  return device_cert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCert::set_allocated_device_cert(::std::string* device_cert) {
  if (device_cert != NULL) {
    
  } else {
    
  }
  device_cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_cert);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.DeviceCert.device_cert)
}

inline const DeviceCert* DeviceCert::internal_default_instance() {
  return &DeviceCert_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthCode

// optional string se_id = 1;
inline void AuthCode::clear_se_id() {
  se_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthCode::se_id() const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCode.se_id)
  return se_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCode::set_se_id(const ::std::string& value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AuthCode.se_id)
}
inline void AuthCode::set_se_id(const char* value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AuthCode.se_id)
}
inline void AuthCode::set_se_id(const char* value, size_t size) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AuthCode.se_id)
}
inline ::std::string* AuthCode::mutable_se_id() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCode.se_id)
  return se_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCode::release_se_id() {
  // @@protoc_insertion_point(field_release:deviceapi.AuthCode.se_id)
  
  return se_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCode::set_allocated_se_id(::std::string* se_id) {
  if (se_id != NULL) {
    
  } else {
    
  }
  se_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_id);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AuthCode.se_id)
}

// optional string auth_code = 2;
inline void AuthCode::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthCode::auth_code() const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCode.auth_code)
  return auth_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCode::set_auth_code(const ::std::string& value) {
  
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AuthCode.auth_code)
}
inline void AuthCode::set_auth_code(const char* value) {
  
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AuthCode.auth_code)
}
inline void AuthCode::set_auth_code(const char* value, size_t size) {
  
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AuthCode.auth_code)
}
inline ::std::string* AuthCode::mutable_auth_code() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCode.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCode::release_auth_code() {
  // @@protoc_insertion_point(field_release:deviceapi.AuthCode.auth_code)
  
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCode::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    
  } else {
    
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AuthCode.auth_code)
}

inline const AuthCode* AuthCode::internal_default_instance() {
  return &AuthCode_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthCodeResponse

// optional string se_id = 1;
inline void AuthCodeResponse::clear_se_id() {
  se_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthCodeResponse::se_id() const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCodeResponse.se_id)
  return se_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeResponse::set_se_id(const ::std::string& value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AuthCodeResponse.se_id)
}
inline void AuthCodeResponse::set_se_id(const char* value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AuthCodeResponse.se_id)
}
inline void AuthCodeResponse::set_se_id(const char* value, size_t size) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AuthCodeResponse.se_id)
}
inline ::std::string* AuthCodeResponse::mutable_se_id() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCodeResponse.se_id)
  return se_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCodeResponse::release_se_id() {
  // @@protoc_insertion_point(field_release:deviceapi.AuthCodeResponse.se_id)
  
  return se_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeResponse::set_allocated_se_id(::std::string* se_id) {
  if (se_id != NULL) {
    
  } else {
    
  }
  se_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_id);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AuthCodeResponse.se_id)
}

// optional string next_stepkey = 2;
inline void AuthCodeResponse::clear_next_stepkey() {
  next_stepkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthCodeResponse::next_stepkey() const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCodeResponse.next_stepkey)
  return next_stepkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeResponse::set_next_stepkey(const ::std::string& value) {
  
  next_stepkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AuthCodeResponse.next_stepkey)
}
inline void AuthCodeResponse::set_next_stepkey(const char* value) {
  
  next_stepkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AuthCodeResponse.next_stepkey)
}
inline void AuthCodeResponse::set_next_stepkey(const char* value, size_t size) {
  
  next_stepkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AuthCodeResponse.next_stepkey)
}
inline ::std::string* AuthCodeResponse::mutable_next_stepkey() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCodeResponse.next_stepkey)
  return next_stepkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCodeResponse::release_next_stepkey() {
  // @@protoc_insertion_point(field_release:deviceapi.AuthCodeResponse.next_stepkey)
  
  return next_stepkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeResponse::set_allocated_next_stepkey(::std::string* next_stepkey) {
  if (next_stepkey != NULL) {
    
  } else {
    
  }
  next_stepkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_stepkey);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AuthCodeResponse.next_stepkey)
}

// repeated string apdu_list = 3;
inline int AuthCodeResponse::apdu_list_size() const {
  return apdu_list_.size();
}
inline void AuthCodeResponse::clear_apdu_list() {
  apdu_list_.Clear();
}
inline const ::std::string& AuthCodeResponse::apdu_list(int index) const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCodeResponse.apdu_list)
  return apdu_list_.Get(index);
}
inline ::std::string* AuthCodeResponse::mutable_apdu_list(int index) {
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCodeResponse.apdu_list)
  return apdu_list_.Mutable(index);
}
inline void AuthCodeResponse::set_apdu_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:deviceapi.AuthCodeResponse.apdu_list)
  apdu_list_.Mutable(index)->assign(value);
}
inline void AuthCodeResponse::set_apdu_list(int index, const char* value) {
  apdu_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:deviceapi.AuthCodeResponse.apdu_list)
}
inline void AuthCodeResponse::set_apdu_list(int index, const char* value, size_t size) {
  apdu_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AuthCodeResponse.apdu_list)
}
inline ::std::string* AuthCodeResponse::add_apdu_list() {
  // @@protoc_insertion_point(field_add_mutable:deviceapi.AuthCodeResponse.apdu_list)
  return apdu_list_.Add();
}
inline void AuthCodeResponse::add_apdu_list(const ::std::string& value) {
  apdu_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:deviceapi.AuthCodeResponse.apdu_list)
}
inline void AuthCodeResponse::add_apdu_list(const char* value) {
  apdu_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:deviceapi.AuthCodeResponse.apdu_list)
}
inline void AuthCodeResponse::add_apdu_list(const char* value, size_t size) {
  apdu_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:deviceapi.AuthCodeResponse.apdu_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuthCodeResponse::apdu_list() const {
  // @@protoc_insertion_point(field_list:deviceapi.AuthCodeResponse.apdu_list)
  return apdu_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AuthCodeResponse::mutable_apdu_list() {
  // @@protoc_insertion_point(field_mutable_list:deviceapi.AuthCodeResponse.apdu_list)
  return &apdu_list_;
}

inline const AuthCodeResponse* AuthCodeResponse::internal_default_instance() {
  return &AuthCodeResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthCodeServiceResponse

// optional string return_code = 1;
inline void AuthCodeServiceResponse::clear_return_code() {
  return_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthCodeServiceResponse::return_code() const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCodeServiceResponse.return_code)
  return return_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeServiceResponse::set_return_code(const ::std::string& value) {
  
  return_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AuthCodeServiceResponse.return_code)
}
inline void AuthCodeServiceResponse::set_return_code(const char* value) {
  
  return_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AuthCodeServiceResponse.return_code)
}
inline void AuthCodeServiceResponse::set_return_code(const char* value, size_t size) {
  
  return_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AuthCodeServiceResponse.return_code)
}
inline ::std::string* AuthCodeServiceResponse::mutable_return_code() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCodeServiceResponse.return_code)
  return return_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCodeServiceResponse::release_return_code() {
  // @@protoc_insertion_point(field_release:deviceapi.AuthCodeServiceResponse.return_code)
  
  return return_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeServiceResponse::set_allocated_return_code(::std::string* return_code) {
  if (return_code != NULL) {
    
  } else {
    
  }
  return_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_code);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AuthCodeServiceResponse.return_code)
}

// optional string return_msg = 2;
inline void AuthCodeServiceResponse::clear_return_msg() {
  return_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthCodeServiceResponse::return_msg() const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCodeServiceResponse.return_msg)
  return return_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeServiceResponse::set_return_msg(const ::std::string& value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AuthCodeServiceResponse.return_msg)
}
inline void AuthCodeServiceResponse::set_return_msg(const char* value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AuthCodeServiceResponse.return_msg)
}
inline void AuthCodeServiceResponse::set_return_msg(const char* value, size_t size) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AuthCodeServiceResponse.return_msg)
}
inline ::std::string* AuthCodeServiceResponse::mutable_return_msg() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCodeServiceResponse.return_msg)
  return return_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCodeServiceResponse::release_return_msg() {
  // @@protoc_insertion_point(field_release:deviceapi.AuthCodeServiceResponse.return_msg)
  
  return return_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCodeServiceResponse::set_allocated_return_msg(::std::string* return_msg) {
  if (return_msg != NULL) {
    
  } else {
    
  }
  return_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_msg);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AuthCodeServiceResponse.return_msg)
}

// optional .deviceapi.AuthCodeResponse return_data = 3;
inline bool AuthCodeServiceResponse::has_return_data() const {
  return this != internal_default_instance() && return_data_ != NULL;
}
inline void AuthCodeServiceResponse::clear_return_data() {
  if (GetArenaNoVirtual() == NULL && return_data_ != NULL) delete return_data_;
  return_data_ = NULL;
}
inline const ::deviceapi::AuthCodeResponse& AuthCodeServiceResponse::return_data() const {
  // @@protoc_insertion_point(field_get:deviceapi.AuthCodeServiceResponse.return_data)
  return return_data_ != NULL ? *return_data_
                         : *::deviceapi::AuthCodeResponse::internal_default_instance();
}
inline ::deviceapi::AuthCodeResponse* AuthCodeServiceResponse::mutable_return_data() {
  
  if (return_data_ == NULL) {
    return_data_ = new ::deviceapi::AuthCodeResponse;
  }
  // @@protoc_insertion_point(field_mutable:deviceapi.AuthCodeServiceResponse.return_data)
  return return_data_;
}
inline ::deviceapi::AuthCodeResponse* AuthCodeServiceResponse::release_return_data() {
  // @@protoc_insertion_point(field_release:deviceapi.AuthCodeServiceResponse.return_data)
  
  ::deviceapi::AuthCodeResponse* temp = return_data_;
  return_data_ = NULL;
  return temp;
}
inline void AuthCodeServiceResponse::set_allocated_return_data(::deviceapi::AuthCodeResponse* return_data) {
  delete return_data_;
  return_data_ = return_data;
  if (return_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AuthCodeServiceResponse.return_data)
}

inline const AuthCodeServiceResponse* AuthCodeServiceResponse::internal_default_instance() {
  return &AuthCodeServiceResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SeAction

// optional string se_id = 1;
inline void SeAction::clear_se_id() {
  se_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeAction::se_id() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeAction.se_id)
  return se_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_se_id(const ::std::string& value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeAction.se_id)
}
inline void SeAction::set_se_id(const char* value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeAction.se_id)
}
inline void SeAction::set_se_id(const char* value, size_t size) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeAction.se_id)
}
inline ::std::string* SeAction::mutable_se_id() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeAction.se_id)
  return se_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeAction::release_se_id() {
  // @@protoc_insertion_point(field_release:deviceapi.SeAction.se_id)
  
  return se_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_allocated_se_id(::std::string* se_id) {
  if (se_id != NULL) {
    
  } else {
    
  }
  se_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_id);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeAction.se_id)
}

// optional string sn = 2;
inline void SeAction::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeAction::sn() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeAction.sn)
  return sn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeAction.sn)
}
inline void SeAction::set_sn(const char* value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeAction.sn)
}
inline void SeAction::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeAction.sn)
}
inline ::std::string* SeAction::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeAction.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeAction::release_sn() {
  // @@protoc_insertion_point(field_release:deviceapi.SeAction.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeAction.sn)
}

// optional string device_cert = 3;
inline void SeAction::clear_device_cert() {
  device_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeAction::device_cert() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeAction.device_cert)
  return device_cert_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_device_cert(const ::std::string& value) {
  
  device_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeAction.device_cert)
}
inline void SeAction::set_device_cert(const char* value) {
  
  device_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeAction.device_cert)
}
inline void SeAction::set_device_cert(const char* value, size_t size) {
  
  device_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeAction.device_cert)
}
inline ::std::string* SeAction::mutable_device_cert() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeAction.device_cert)
  return device_cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeAction::release_device_cert() {
  // @@protoc_insertion_point(field_release:deviceapi.SeAction.device_cert)
  
  return device_cert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_allocated_device_cert(::std::string* device_cert) {
  if (device_cert != NULL) {
    
  } else {
    
  }
  device_cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_cert);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeAction.device_cert)
}

// optional string sdk_version = 4;
inline void SeAction::clear_sdk_version() {
  sdk_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeAction::sdk_version() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeAction.sdk_version)
  return sdk_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_sdk_version(const ::std::string& value) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeAction.sdk_version)
}
inline void SeAction::set_sdk_version(const char* value) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeAction.sdk_version)
}
inline void SeAction::set_sdk_version(const char* value, size_t size) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeAction.sdk_version)
}
inline ::std::string* SeAction::mutable_sdk_version() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeAction.sdk_version)
  return sdk_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeAction::release_sdk_version() {
  // @@protoc_insertion_point(field_release:deviceapi.SeAction.sdk_version)
  
  return sdk_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeAction::set_allocated_sdk_version(::std::string* sdk_version) {
  if (sdk_version != NULL) {
    
  } else {
    
  }
  sdk_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_version);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeAction.sdk_version)
}

inline const SeAction* SeAction::internal_default_instance() {
  return &SeAction_default_instance_.get();
}
// -------------------------------------------------------------------

// SeQueryResponse

// optional string se_id = 1;
inline void SeQueryResponse::clear_se_id() {
  se_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeQueryResponse::se_id() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryResponse.se_id)
  return se_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_se_id(const ::std::string& value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeQueryResponse.se_id)
}
inline void SeQueryResponse::set_se_id(const char* value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeQueryResponse.se_id)
}
inline void SeQueryResponse::set_se_id(const char* value, size_t size) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeQueryResponse.se_id)
}
inline ::std::string* SeQueryResponse::mutable_se_id() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryResponse.se_id)
  return se_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeQueryResponse::release_se_id() {
  // @@protoc_insertion_point(field_release:deviceapi.SeQueryResponse.se_id)
  
  return se_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_allocated_se_id(::std::string* se_id) {
  if (se_id != NULL) {
    
  } else {
    
  }
  se_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_id);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeQueryResponse.se_id)
}

// optional string next_stepkey = 2;
inline void SeQueryResponse::clear_next_stepkey() {
  next_stepkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeQueryResponse::next_stepkey() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryResponse.next_stepkey)
  return next_stepkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_next_stepkey(const ::std::string& value) {
  
  next_stepkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeQueryResponse.next_stepkey)
}
inline void SeQueryResponse::set_next_stepkey(const char* value) {
  
  next_stepkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeQueryResponse.next_stepkey)
}
inline void SeQueryResponse::set_next_stepkey(const char* value, size_t size) {
  
  next_stepkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeQueryResponse.next_stepkey)
}
inline ::std::string* SeQueryResponse::mutable_next_stepkey() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryResponse.next_stepkey)
  return next_stepkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeQueryResponse::release_next_stepkey() {
  // @@protoc_insertion_point(field_release:deviceapi.SeQueryResponse.next_stepkey)
  
  return next_stepkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_allocated_next_stepkey(::std::string* next_stepkey) {
  if (next_stepkey != NULL) {
    
  } else {
    
  }
  next_stepkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_stepkey);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeQueryResponse.next_stepkey)
}

// optional string sn = 3;
inline void SeQueryResponse::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeQueryResponse::sn() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryResponse.sn)
  return sn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeQueryResponse.sn)
}
inline void SeQueryResponse::set_sn(const char* value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeQueryResponse.sn)
}
inline void SeQueryResponse::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeQueryResponse.sn)
}
inline ::std::string* SeQueryResponse::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryResponse.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeQueryResponse::release_sn() {
  // @@protoc_insertion_point(field_release:deviceapi.SeQueryResponse.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeQueryResponse.sn)
}

// optional string sdk_mode = 4;
inline void SeQueryResponse::clear_sdk_mode() {
  sdk_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeQueryResponse::sdk_mode() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryResponse.sdk_mode)
  return sdk_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_sdk_mode(const ::std::string& value) {
  
  sdk_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeQueryResponse.sdk_mode)
}
inline void SeQueryResponse::set_sdk_mode(const char* value) {
  
  sdk_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeQueryResponse.sdk_mode)
}
inline void SeQueryResponse::set_sdk_mode(const char* value, size_t size) {
  
  sdk_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeQueryResponse.sdk_mode)
}
inline ::std::string* SeQueryResponse::mutable_sdk_mode() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryResponse.sdk_mode)
  return sdk_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeQueryResponse::release_sdk_mode() {
  // @@protoc_insertion_point(field_release:deviceapi.SeQueryResponse.sdk_mode)
  
  return sdk_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryResponse::set_allocated_sdk_mode(::std::string* sdk_mode) {
  if (sdk_mode != NULL) {
    
  } else {
    
  }
  sdk_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_mode);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeQueryResponse.sdk_mode)
}

// repeated .deviceapi.AvailableAppBean available_app_bean_list = 5;
inline int SeQueryResponse::available_app_bean_list_size() const {
  return available_app_bean_list_.size();
}
inline void SeQueryResponse::clear_available_app_bean_list() {
  available_app_bean_list_.Clear();
}
inline const ::deviceapi::AvailableAppBean& SeQueryResponse::available_app_bean_list(int index) const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryResponse.available_app_bean_list)
  return available_app_bean_list_.Get(index);
}
inline ::deviceapi::AvailableAppBean* SeQueryResponse::mutable_available_app_bean_list(int index) {
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryResponse.available_app_bean_list)
  return available_app_bean_list_.Mutable(index);
}
inline ::deviceapi::AvailableAppBean* SeQueryResponse::add_available_app_bean_list() {
  // @@protoc_insertion_point(field_add:deviceapi.SeQueryResponse.available_app_bean_list)
  return available_app_bean_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >*
SeQueryResponse::mutable_available_app_bean_list() {
  // @@protoc_insertion_point(field_mutable_list:deviceapi.SeQueryResponse.available_app_bean_list)
  return &available_app_bean_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >&
SeQueryResponse::available_app_bean_list() const {
  // @@protoc_insertion_point(field_list:deviceapi.SeQueryResponse.available_app_bean_list)
  return available_app_bean_list_;
}

inline const SeQueryResponse* SeQueryResponse::internal_default_instance() {
  return &SeQueryResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// SeQueryServiceResponse

// optional string return_code = 1;
inline void SeQueryServiceResponse::clear_return_code() {
  return_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeQueryServiceResponse::return_code() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryServiceResponse.return_code)
  return return_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryServiceResponse::set_return_code(const ::std::string& value) {
  
  return_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeQueryServiceResponse.return_code)
}
inline void SeQueryServiceResponse::set_return_code(const char* value) {
  
  return_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeQueryServiceResponse.return_code)
}
inline void SeQueryServiceResponse::set_return_code(const char* value, size_t size) {
  
  return_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeQueryServiceResponse.return_code)
}
inline ::std::string* SeQueryServiceResponse::mutable_return_code() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryServiceResponse.return_code)
  return return_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeQueryServiceResponse::release_return_code() {
  // @@protoc_insertion_point(field_release:deviceapi.SeQueryServiceResponse.return_code)
  
  return return_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryServiceResponse::set_allocated_return_code(::std::string* return_code) {
  if (return_code != NULL) {
    
  } else {
    
  }
  return_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_code);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeQueryServiceResponse.return_code)
}

// optional string return_msg = 2;
inline void SeQueryServiceResponse::clear_return_msg() {
  return_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeQueryServiceResponse::return_msg() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryServiceResponse.return_msg)
  return return_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryServiceResponse::set_return_msg(const ::std::string& value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SeQueryServiceResponse.return_msg)
}
inline void SeQueryServiceResponse::set_return_msg(const char* value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SeQueryServiceResponse.return_msg)
}
inline void SeQueryServiceResponse::set_return_msg(const char* value, size_t size) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SeQueryServiceResponse.return_msg)
}
inline ::std::string* SeQueryServiceResponse::mutable_return_msg() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryServiceResponse.return_msg)
  return return_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeQueryServiceResponse::release_return_msg() {
  // @@protoc_insertion_point(field_release:deviceapi.SeQueryServiceResponse.return_msg)
  
  return return_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeQueryServiceResponse::set_allocated_return_msg(::std::string* return_msg) {
  if (return_msg != NULL) {
    
  } else {
    
  }
  return_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_msg);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeQueryServiceResponse.return_msg)
}

// optional .deviceapi.SeQueryResponse return_data = 3;
inline bool SeQueryServiceResponse::has_return_data() const {
  return this != internal_default_instance() && return_data_ != NULL;
}
inline void SeQueryServiceResponse::clear_return_data() {
  if (GetArenaNoVirtual() == NULL && return_data_ != NULL) delete return_data_;
  return_data_ = NULL;
}
inline const ::deviceapi::SeQueryResponse& SeQueryServiceResponse::return_data() const {
  // @@protoc_insertion_point(field_get:deviceapi.SeQueryServiceResponse.return_data)
  return return_data_ != NULL ? *return_data_
                         : *::deviceapi::SeQueryResponse::internal_default_instance();
}
inline ::deviceapi::SeQueryResponse* SeQueryServiceResponse::mutable_return_data() {
  
  if (return_data_ == NULL) {
    return_data_ = new ::deviceapi::SeQueryResponse;
  }
  // @@protoc_insertion_point(field_mutable:deviceapi.SeQueryServiceResponse.return_data)
  return return_data_;
}
inline ::deviceapi::SeQueryResponse* SeQueryServiceResponse::release_return_data() {
  // @@protoc_insertion_point(field_release:deviceapi.SeQueryServiceResponse.return_data)
  
  ::deviceapi::SeQueryResponse* temp = return_data_;
  return_data_ = NULL;
  return temp;
}
inline void SeQueryServiceResponse::set_allocated_return_data(::deviceapi::SeQueryResponse* return_data) {
  delete return_data_;
  return_data_ = return_data;
  if (return_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SeQueryServiceResponse.return_data)
}

inline const SeQueryServiceResponse* SeQueryServiceResponse::internal_default_instance() {
  return &SeQueryServiceResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// BindCheck

// optional string file_path = 1;
inline void BindCheck::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindCheck::file_path() const {
  // @@protoc_insertion_point(field_get:deviceapi.BindCheck.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindCheck::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.BindCheck.file_path)
}
inline void BindCheck::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.BindCheck.file_path)
}
inline void BindCheck::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.BindCheck.file_path)
}
inline ::std::string* BindCheck::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.BindCheck.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindCheck::release_file_path() {
  // @@protoc_insertion_point(field_release:deviceapi.BindCheck.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindCheck::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.BindCheck.file_path)
}

inline const BindCheck* BindCheck::internal_default_instance() {
  return &BindCheck_default_instance_.get();
}
// -------------------------------------------------------------------

// BindAcquire

// optional string bind_code = 1;
inline void BindAcquire::clear_bind_code() {
  bind_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindAcquire::bind_code() const {
  // @@protoc_insertion_point(field_get:deviceapi.BindAcquire.bind_code)
  return bind_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindAcquire::set_bind_code(const ::std::string& value) {
  
  bind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.BindAcquire.bind_code)
}
inline void BindAcquire::set_bind_code(const char* value) {
  
  bind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.BindAcquire.bind_code)
}
inline void BindAcquire::set_bind_code(const char* value, size_t size) {
  
  bind_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.BindAcquire.bind_code)
}
inline ::std::string* BindAcquire::mutable_bind_code() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.BindAcquire.bind_code)
  return bind_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindAcquire::release_bind_code() {
  // @@protoc_insertion_point(field_release:deviceapi.BindAcquire.bind_code)
  
  return bind_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindAcquire::set_allocated_bind_code(::std::string* bind_code) {
  if (bind_code != NULL) {
    
  } else {
    
  }
  bind_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bind_code);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.BindAcquire.bind_code)
}

inline const BindAcquire* BindAcquire::internal_default_instance() {
  return &BindAcquire_default_instance_.get();
}
// -------------------------------------------------------------------

// BindAcquireResponse

// optional string bind_result = 1;
inline void BindAcquireResponse::clear_bind_result() {
  bind_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindAcquireResponse::bind_result() const {
  // @@protoc_insertion_point(field_get:deviceapi.BindAcquireResponse.bind_result)
  return bind_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindAcquireResponse::set_bind_result(const ::std::string& value) {
  
  bind_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.BindAcquireResponse.bind_result)
}
inline void BindAcquireResponse::set_bind_result(const char* value) {
  
  bind_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.BindAcquireResponse.bind_result)
}
inline void BindAcquireResponse::set_bind_result(const char* value, size_t size) {
  
  bind_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.BindAcquireResponse.bind_result)
}
inline ::std::string* BindAcquireResponse::mutable_bind_result() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.BindAcquireResponse.bind_result)
  return bind_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindAcquireResponse::release_bind_result() {
  // @@protoc_insertion_point(field_release:deviceapi.BindAcquireResponse.bind_result)
  
  return bind_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindAcquireResponse::set_allocated_bind_result(::std::string* bind_result) {
  if (bind_result != NULL) {
    
  } else {
    
  }
  bind_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bind_result);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.BindAcquireResponse.bind_result)
}

inline const BindAcquireResponse* BindAcquireResponse::internal_default_instance() {
  return &BindAcquireResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// BindDisplay

inline const BindDisplay* BindDisplay::internal_default_instance() {
  return &BindDisplay_default_instance_.get();
}
// -------------------------------------------------------------------

// BindDisplayResponse

// optional string bind_display_result = 1;
inline void BindDisplayResponse::clear_bind_display_result() {
  bind_display_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindDisplayResponse::bind_display_result() const {
  // @@protoc_insertion_point(field_get:deviceapi.BindDisplayResponse.bind_display_result)
  return bind_display_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindDisplayResponse::set_bind_display_result(const ::std::string& value) {
  
  bind_display_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.BindDisplayResponse.bind_display_result)
}
inline void BindDisplayResponse::set_bind_display_result(const char* value) {
  
  bind_display_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.BindDisplayResponse.bind_display_result)
}
inline void BindDisplayResponse::set_bind_display_result(const char* value, size_t size) {
  
  bind_display_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.BindDisplayResponse.bind_display_result)
}
inline ::std::string* BindDisplayResponse::mutable_bind_display_result() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.BindDisplayResponse.bind_display_result)
  return bind_display_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindDisplayResponse::release_bind_display_result() {
  // @@protoc_insertion_point(field_release:deviceapi.BindDisplayResponse.bind_display_result)
  
  return bind_display_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindDisplayResponse::set_allocated_bind_display_result(::std::string* bind_display_result) {
  if (bind_display_result != NULL) {
    
  } else {
    
  }
  bind_display_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bind_display_result);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.BindDisplayResponse.bind_display_result)
}

inline const BindDisplayResponse* BindDisplayResponse::internal_default_instance() {
  return &BindDisplayResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// DeviceName

// optional string ble_name = 1;
inline void DeviceName::clear_ble_name() {
  ble_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceName::ble_name() const {
  // @@protoc_insertion_point(field_get:deviceapi.DeviceName.ble_name)
  return ble_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceName::set_ble_name(const ::std::string& value) {
  
  ble_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.DeviceName.ble_name)
}
inline void DeviceName::set_ble_name(const char* value) {
  
  ble_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.DeviceName.ble_name)
}
inline void DeviceName::set_ble_name(const char* value, size_t size) {
  
  ble_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.DeviceName.ble_name)
}
inline ::std::string* DeviceName::mutable_ble_name() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.DeviceName.ble_name)
  return ble_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceName::release_ble_name() {
  // @@protoc_insertion_point(field_release:deviceapi.DeviceName.ble_name)
  
  return ble_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceName::set_allocated_ble_name(::std::string* ble_name) {
  if (ble_name != NULL) {
    
  } else {
    
  }
  ble_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ble_name);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.DeviceName.ble_name)
}

inline const DeviceName* DeviceName::internal_default_instance() {
  return &DeviceName_default_instance_.get();
}
// -------------------------------------------------------------------

// GetSnResponse

// optional string sn = 1;
inline void GetSnResponse::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSnResponse::sn() const {
  // @@protoc_insertion_point(field_get:deviceapi.GetSnResponse.sn)
  return sn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSnResponse::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.GetSnResponse.sn)
}
inline void GetSnResponse::set_sn(const char* value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.GetSnResponse.sn)
}
inline void GetSnResponse::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.GetSnResponse.sn)
}
inline ::std::string* GetSnResponse::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.GetSnResponse.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSnResponse::release_sn() {
  // @@protoc_insertion_point(field_release:deviceapi.GetSnResponse.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSnResponse::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.GetSnResponse.sn)
}

inline const GetSnResponse* GetSnResponse::internal_default_instance() {
  return &GetSnResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// ApduResponse

// optional string result = 1;
inline void ApduResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApduResponse::result() const {
  // @@protoc_insertion_point(field_get:deviceapi.ApduResponse.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApduResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.ApduResponse.result)
}
inline void ApduResponse::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.ApduResponse.result)
}
inline void ApduResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.ApduResponse.result)
}
inline ::std::string* ApduResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.ApduResponse.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApduResponse::release_result() {
  // @@protoc_insertion_point(field_release:deviceapi.ApduResponse.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApduResponse::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.ApduResponse.result)
}

inline const ApduResponse* ApduResponse::internal_default_instance() {
  return &ApduResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// Test

// optional string tt = 1;
inline void Test::clear_tt() {
  tt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::tt() const {
  // @@protoc_insertion_point(field_get:deviceapi.Test.tt)
  return tt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_tt(const ::std::string& value) {
  
  tt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.Test.tt)
}
inline void Test::set_tt(const char* value) {
  
  tt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.Test.tt)
}
inline void Test::set_tt(const char* value, size_t size) {
  
  tt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.Test.tt)
}
inline ::std::string* Test::mutable_tt() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.Test.tt)
  return tt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_tt() {
  // @@protoc_insertion_point(field_release:deviceapi.Test.tt)
  
  return tt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_tt(::std::string* tt) {
  if (tt != NULL) {
    
  } else {
    
  }
  tt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tt);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.Test.tt)
}

inline const Test* Test::internal_default_instance() {
  return &Test_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckUpdateResponse

// optional string se_id = 1;
inline void CheckUpdateResponse::clear_se_id() {
  se_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUpdateResponse::se_id() const {
  // @@protoc_insertion_point(field_get:deviceapi.CheckUpdateResponse.se_id)
  return se_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_se_id(const ::std::string& value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.CheckUpdateResponse.se_id)
}
inline void CheckUpdateResponse::set_se_id(const char* value) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.CheckUpdateResponse.se_id)
}
inline void CheckUpdateResponse::set_se_id(const char* value, size_t size) {
  
  se_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.CheckUpdateResponse.se_id)
}
inline ::std::string* CheckUpdateResponse::mutable_se_id() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.CheckUpdateResponse.se_id)
  return se_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUpdateResponse::release_se_id() {
  // @@protoc_insertion_point(field_release:deviceapi.CheckUpdateResponse.se_id)
  
  return se_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_allocated_se_id(::std::string* se_id) {
  if (se_id != NULL) {
    
  } else {
    
  }
  se_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), se_id);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.CheckUpdateResponse.se_id)
}

// optional string sn = 2;
inline void CheckUpdateResponse::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUpdateResponse::sn() const {
  // @@protoc_insertion_point(field_get:deviceapi.CheckUpdateResponse.sn)
  return sn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.CheckUpdateResponse.sn)
}
inline void CheckUpdateResponse::set_sn(const char* value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.CheckUpdateResponse.sn)
}
inline void CheckUpdateResponse::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.CheckUpdateResponse.sn)
}
inline ::std::string* CheckUpdateResponse::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.CheckUpdateResponse.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUpdateResponse::release_sn() {
  // @@protoc_insertion_point(field_release:deviceapi.CheckUpdateResponse.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.CheckUpdateResponse.sn)
}

// optional string status = 3;
inline void CheckUpdateResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUpdateResponse::status() const {
  // @@protoc_insertion_point(field_get:deviceapi.CheckUpdateResponse.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.CheckUpdateResponse.status)
}
inline void CheckUpdateResponse::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.CheckUpdateResponse.status)
}
inline void CheckUpdateResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.CheckUpdateResponse.status)
}
inline ::std::string* CheckUpdateResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.CheckUpdateResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUpdateResponse::release_status() {
  // @@protoc_insertion_point(field_release:deviceapi.CheckUpdateResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.CheckUpdateResponse.status)
}

// optional string sdk_mode = 4;
inline void CheckUpdateResponse::clear_sdk_mode() {
  sdk_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUpdateResponse::sdk_mode() const {
  // @@protoc_insertion_point(field_get:deviceapi.CheckUpdateResponse.sdk_mode)
  return sdk_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_sdk_mode(const ::std::string& value) {
  
  sdk_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.CheckUpdateResponse.sdk_mode)
}
inline void CheckUpdateResponse::set_sdk_mode(const char* value) {
  
  sdk_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.CheckUpdateResponse.sdk_mode)
}
inline void CheckUpdateResponse::set_sdk_mode(const char* value, size_t size) {
  
  sdk_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.CheckUpdateResponse.sdk_mode)
}
inline ::std::string* CheckUpdateResponse::mutable_sdk_mode() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.CheckUpdateResponse.sdk_mode)
  return sdk_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUpdateResponse::release_sdk_mode() {
  // @@protoc_insertion_point(field_release:deviceapi.CheckUpdateResponse.sdk_mode)
  
  return sdk_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateResponse::set_allocated_sdk_mode(::std::string* sdk_mode) {
  if (sdk_mode != NULL) {
    
  } else {
    
  }
  sdk_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_mode);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.CheckUpdateResponse.sdk_mode)
}

// repeated .deviceapi.AvailableAppBean available_app_list = 5;
inline int CheckUpdateResponse::available_app_list_size() const {
  return available_app_list_.size();
}
inline void CheckUpdateResponse::clear_available_app_list() {
  available_app_list_.Clear();
}
inline const ::deviceapi::AvailableAppBean& CheckUpdateResponse::available_app_list(int index) const {
  // @@protoc_insertion_point(field_get:deviceapi.CheckUpdateResponse.available_app_list)
  return available_app_list_.Get(index);
}
inline ::deviceapi::AvailableAppBean* CheckUpdateResponse::mutable_available_app_list(int index) {
  // @@protoc_insertion_point(field_mutable:deviceapi.CheckUpdateResponse.available_app_list)
  return available_app_list_.Mutable(index);
}
inline ::deviceapi::AvailableAppBean* CheckUpdateResponse::add_available_app_list() {
  // @@protoc_insertion_point(field_add:deviceapi.CheckUpdateResponse.available_app_list)
  return available_app_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >*
CheckUpdateResponse::mutable_available_app_list() {
  // @@protoc_insertion_point(field_mutable_list:deviceapi.CheckUpdateResponse.available_app_list)
  return &available_app_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::deviceapi::AvailableAppBean >&
CheckUpdateResponse::available_app_list() const {
  // @@protoc_insertion_point(field_list:deviceapi.CheckUpdateResponse.available_app_list)
  return available_app_list_;
}

inline const CheckUpdateResponse* CheckUpdateResponse::internal_default_instance() {
  return &CheckUpdateResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// AvailableAppBean

// optional string app_name = 1;
inline void AvailableAppBean::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AvailableAppBean::app_name() const {
  // @@protoc_insertion_point(field_get:deviceapi.AvailableAppBean.app_name)
  return app_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_app_name(const ::std::string& value) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AvailableAppBean.app_name)
}
inline void AvailableAppBean::set_app_name(const char* value) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AvailableAppBean.app_name)
}
inline void AvailableAppBean::set_app_name(const char* value, size_t size) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AvailableAppBean.app_name)
}
inline ::std::string* AvailableAppBean::mutable_app_name() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AvailableAppBean.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AvailableAppBean::release_app_name() {
  // @@protoc_insertion_point(field_release:deviceapi.AvailableAppBean.app_name)
  
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_allocated_app_name(::std::string* app_name) {
  if (app_name != NULL) {
    
  } else {
    
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AvailableAppBean.app_name)
}

// optional string app_logo = 2;
inline void AvailableAppBean::clear_app_logo() {
  app_logo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AvailableAppBean::app_logo() const {
  // @@protoc_insertion_point(field_get:deviceapi.AvailableAppBean.app_logo)
  return app_logo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_app_logo(const ::std::string& value) {
  
  app_logo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AvailableAppBean.app_logo)
}
inline void AvailableAppBean::set_app_logo(const char* value) {
  
  app_logo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AvailableAppBean.app_logo)
}
inline void AvailableAppBean::set_app_logo(const char* value, size_t size) {
  
  app_logo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AvailableAppBean.app_logo)
}
inline ::std::string* AvailableAppBean::mutable_app_logo() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AvailableAppBean.app_logo)
  return app_logo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AvailableAppBean::release_app_logo() {
  // @@protoc_insertion_point(field_release:deviceapi.AvailableAppBean.app_logo)
  
  return app_logo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_allocated_app_logo(::std::string* app_logo) {
  if (app_logo != NULL) {
    
  } else {
    
  }
  app_logo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_logo);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AvailableAppBean.app_logo)
}

// optional string installed_version = 3;
inline void AvailableAppBean::clear_installed_version() {
  installed_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AvailableAppBean::installed_version() const {
  // @@protoc_insertion_point(field_get:deviceapi.AvailableAppBean.installed_version)
  return installed_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_installed_version(const ::std::string& value) {
  
  installed_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AvailableAppBean.installed_version)
}
inline void AvailableAppBean::set_installed_version(const char* value) {
  
  installed_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AvailableAppBean.installed_version)
}
inline void AvailableAppBean::set_installed_version(const char* value, size_t size) {
  
  installed_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AvailableAppBean.installed_version)
}
inline ::std::string* AvailableAppBean::mutable_installed_version() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AvailableAppBean.installed_version)
  return installed_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AvailableAppBean::release_installed_version() {
  // @@protoc_insertion_point(field_release:deviceapi.AvailableAppBean.installed_version)
  
  return installed_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_allocated_installed_version(::std::string* installed_version) {
  if (installed_version != NULL) {
    
  } else {
    
  }
  installed_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), installed_version);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AvailableAppBean.installed_version)
}

// optional string last_updated = 4;
inline void AvailableAppBean::clear_last_updated() {
  last_updated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AvailableAppBean::last_updated() const {
  // @@protoc_insertion_point(field_get:deviceapi.AvailableAppBean.last_updated)
  return last_updated_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_last_updated(const ::std::string& value) {
  
  last_updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AvailableAppBean.last_updated)
}
inline void AvailableAppBean::set_last_updated(const char* value) {
  
  last_updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AvailableAppBean.last_updated)
}
inline void AvailableAppBean::set_last_updated(const char* value, size_t size) {
  
  last_updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AvailableAppBean.last_updated)
}
inline ::std::string* AvailableAppBean::mutable_last_updated() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AvailableAppBean.last_updated)
  return last_updated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AvailableAppBean::release_last_updated() {
  // @@protoc_insertion_point(field_release:deviceapi.AvailableAppBean.last_updated)
  
  return last_updated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_allocated_last_updated(::std::string* last_updated) {
  if (last_updated != NULL) {
    
  } else {
    
  }
  last_updated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_updated);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AvailableAppBean.last_updated)
}

// optional string latest_version = 5;
inline void AvailableAppBean::clear_latest_version() {
  latest_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AvailableAppBean::latest_version() const {
  // @@protoc_insertion_point(field_get:deviceapi.AvailableAppBean.latest_version)
  return latest_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_latest_version(const ::std::string& value) {
  
  latest_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AvailableAppBean.latest_version)
}
inline void AvailableAppBean::set_latest_version(const char* value) {
  
  latest_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AvailableAppBean.latest_version)
}
inline void AvailableAppBean::set_latest_version(const char* value, size_t size) {
  
  latest_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AvailableAppBean.latest_version)
}
inline ::std::string* AvailableAppBean::mutable_latest_version() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AvailableAppBean.latest_version)
  return latest_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AvailableAppBean::release_latest_version() {
  // @@protoc_insertion_point(field_release:deviceapi.AvailableAppBean.latest_version)
  
  return latest_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_allocated_latest_version(::std::string* latest_version) {
  if (latest_version != NULL) {
    
  } else {
    
  }
  latest_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_version);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AvailableAppBean.latest_version)
}

// optional string install_mode = 6;
inline void AvailableAppBean::clear_install_mode() {
  install_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AvailableAppBean::install_mode() const {
  // @@protoc_insertion_point(field_get:deviceapi.AvailableAppBean.install_mode)
  return install_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_install_mode(const ::std::string& value) {
  
  install_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.AvailableAppBean.install_mode)
}
inline void AvailableAppBean::set_install_mode(const char* value) {
  
  install_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.AvailableAppBean.install_mode)
}
inline void AvailableAppBean::set_install_mode(const char* value, size_t size) {
  
  install_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.AvailableAppBean.install_mode)
}
inline ::std::string* AvailableAppBean::mutable_install_mode() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.AvailableAppBean.install_mode)
  return install_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AvailableAppBean::release_install_mode() {
  // @@protoc_insertion_point(field_release:deviceapi.AvailableAppBean.install_mode)
  
  return install_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvailableAppBean::set_allocated_install_mode(::std::string* install_mode) {
  if (install_mode != NULL) {
    
  } else {
    
  }
  install_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), install_mode);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.AvailableAppBean.install_mode)
}

inline const AvailableAppBean* AvailableAppBean::internal_default_instance() {
  return &AvailableAppBean_default_instance_.get();
}
// -------------------------------------------------------------------

// SdkInfoResponse

// optional string sdk_version = 1;
inline void SdkInfoResponse::clear_sdk_version() {
  sdk_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SdkInfoResponse::sdk_version() const {
  // @@protoc_insertion_point(field_get:deviceapi.SdkInfoResponse.sdk_version)
  return sdk_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SdkInfoResponse::set_sdk_version(const ::std::string& value) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.SdkInfoResponse.sdk_version)
}
inline void SdkInfoResponse::set_sdk_version(const char* value) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.SdkInfoResponse.sdk_version)
}
inline void SdkInfoResponse::set_sdk_version(const char* value, size_t size) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.SdkInfoResponse.sdk_version)
}
inline ::std::string* SdkInfoResponse::mutable_sdk_version() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.SdkInfoResponse.sdk_version)
  return sdk_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SdkInfoResponse::release_sdk_version() {
  // @@protoc_insertion_point(field_release:deviceapi.SdkInfoResponse.sdk_version)
  
  return sdk_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SdkInfoResponse::set_allocated_sdk_version(::std::string* sdk_version) {
  if (sdk_version != NULL) {
    
  } else {
    
  }
  sdk_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_version);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.SdkInfoResponse.sdk_version)
}

inline const SdkInfoResponse* SdkInfoResponse::internal_default_instance() {
  return &SdkInfoResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// BleAction

// optional string ble_name = 1;
inline void BleAction::clear_ble_name() {
  ble_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BleAction::ble_name() const {
  // @@protoc_insertion_point(field_get:deviceapi.BleAction.ble_name)
  return ble_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BleAction::set_ble_name(const ::std::string& value) {
  
  ble_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deviceapi.BleAction.ble_name)
}
inline void BleAction::set_ble_name(const char* value) {
  
  ble_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deviceapi.BleAction.ble_name)
}
inline void BleAction::set_ble_name(const char* value, size_t size) {
  
  ble_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deviceapi.BleAction.ble_name)
}
inline ::std::string* BleAction::mutable_ble_name() {
  
  // @@protoc_insertion_point(field_mutable:deviceapi.BleAction.ble_name)
  return ble_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BleAction::release_ble_name() {
  // @@protoc_insertion_point(field_release:deviceapi.BleAction.ble_name)
  
  return ble_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BleAction::set_allocated_ble_name(::std::string* ble_name) {
  if (ble_name != NULL) {
    
  } else {
    
  }
  ble_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ble_name);
  // @@protoc_insertion_point(field_set_allocated:deviceapi.BleAction.ble_name)
}

inline const BleAction* BleAction::internal_default_instance() {
  return &BleAction_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace deviceapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_2eproto__INCLUDED
